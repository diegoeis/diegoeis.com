<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>diegoeis.com</title>
  <subtitle>Blog do Diego Eis</subtitle>
  <id>http://diegoeis.com/</id>
  <link href="http://diegoeis.com/"/>
  <link href="http://diegoeis.com/feed.xml" rel="self"/>
  <updated>2016-10-22T22:00:00-02:00</updated>
  <author>
    <name>Diego Eis</name>
  </author>
  <entry>
    <title>Hello World com React desde o rascunho</title>
    <link rel="alternate" href="http://diegoeis.com/hello-world-com-react-desde-o-rascunho.html"/>
    <id>http://diegoeis.com/hello-world-com-react-desde-o-rascunho.html</id>
    <published>2016-10-22T22:00:00-02:00</published>
    <updated>2016-10-23T12:22:23-02:00</updated>
    <author>
      <name>Diego Eis</name>
    </author>
    <content type="html">&lt;p&gt;Há muito tempo eu queria fazer um Hello World com React, mas nunca tinha tempo por que eu mudei de área fazem uns 3 anos, ficando mais na parte de gestão de produtos e times, deixando totalmente o desenvolvimento e a escrita de código. Por isso, senti na pele o que os iniciantes sentem quando precisam fazer um simples Hello World de uma tecnologia nova. São tantos artigos falando coisas diferentes, usando setups diferentes, na sua maioria complexos e que não explicam as coisas com simplicidade.&lt;/p&gt;

&lt;p&gt;É por isso que eu tenho procurado conteúdo fácil para poder investir um tempo e aprender pelo menos o básico e o início do React. Eu li uma série de fontes pela internet, que você pode conferir no final do artigo, além de um curso grátis, muito, mas muito bem feito pelo &lt;a href="http://jscasts.teachable.com/"&gt;Matheus Lima no JSCasts&lt;/a&gt;. Esse é um artigo baseado em todas essas fontes. Tentei abstrair toda as inutilidades que alguém não precisa aprender logo que está iniciando. Espero que tenha cumprido com o objetivo.&lt;/p&gt;

&lt;h2&gt;Conceitos do React e Introdução&lt;/h2&gt;

&lt;p&gt;O React foi pensado em como podemos componentizar nossos elementos, de forma que eles sejam independentes, mas reutilizáveis. Pensa em um componente como se fosse um widget ou um módulo. Se ficar mais fácil, pense que um componente é um pedaço de HTML, CSS, JS e os poucos dados que irão popular esse pedaço do layout.&lt;/p&gt;

&lt;p&gt;Sem entrar na polêmica de modularização e componentização no JS, atualmente, nós organizamos na pior das hipóteses - e mais comum também -, os componentes como partes separadas de códigos. Você pega um pedaço de código HTML, coloca numa determinada página, que é formatada com CSS e manipulada com JS. O código que estrutura, formata e manipula seu componente está separado nesses três arquivos de HTML, CSS e JS. No React, o conceito é mais simples, onde unificamos o HTML dentro do JS, o que no React chamamos de JSX.&lt;/p&gt;

&lt;p&gt;&lt;img src="assets/images/iniciando-react/react-component.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Perceba que na imagem acima - &lt;a href="https://dribbble.com/shots/1262636-To-Do-Dashboard/attachments/172917"&gt;peguei o layout de exemplo daqui&lt;/a&gt; - cada retângulo colorido tem um componente pai, com seus componentes internos,  que chamamos de componentes filhos. Podemos, então, criar um componente chamado &lt;code&gt;navBar&lt;/code&gt; com um componente filho chamado &lt;code&gt;userInfo&lt;/code&gt;, que conterá as informações do usuário. O nosso componente &lt;strong&gt;pai&lt;/strong&gt;, guarda estado dos dados que usaremos nos componentes filhos. O &lt;strong&gt;pai&lt;/strong&gt; compartilha os dados com os filhos por meio de atributos. Nesse exemplo, a &lt;code&gt;navBar&lt;/code&gt; iria compartilhar as informações do usuário logado para o componente filho &lt;code&gt;userInfo&lt;/code&gt;. Esta hierarquia de pai e filho faz com que o gerenciamento de dados seja simples, por que nós sabemos exatamente onde os dados estarão, não causando confusão usando esses dados erroneamente em outros lugares.&lt;/p&gt;

&lt;p&gt;O JSX é como o ReactJS cria os componentes em JavaScript. Você vai escrever HTML (quase) normal dentro do próprio JS, o ReactJS, por sua vez, vai se encarregar de traduzir esse HTML para JavaScript, que vai renderizar um elemento no DOM. Se você tem o código &lt;code&gt;&amp;lt;h1&amp;gt;Titulo&amp;lt;/h1&amp;gt;&lt;/code&gt;, o JSX vai se transformar em &lt;code&gt;React.createElement(&amp;#39;h1&amp;#39;, null, &amp;#39;Titulo&amp;#39;);&lt;/code&gt; antes de ser executado pelo browser. Escrever com esse HTML do React (JSX), facilita a leitura e você diminui a curva de aprendizado. &lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido sobre o &lt;strong&gt;Virtual DOM&lt;/strong&gt;. O Virtual DOM é a árvore de componentes que o ReactJS gera para que o browser renderize na tela. Pra melhorar a performance, o ReactJS gera todo o HTML (baseado em JSX e transformado em JavaScript) na memória antes de renderizar para o usuário. Além disso, ele fica vigiando esse Virtual DOM procurando por alterações. Quando algo é alterado, ele muda apenas o que foi alterado e não todo o HTML. &lt;/p&gt;

&lt;h2&gt;Setup do projeto&lt;/h2&gt;

&lt;p&gt;Como todo o projeto, necessitamos fazer um setup inicial, preparando o ambiente e iniciando parte do código. Nesse setup vamos começar criando o projeto com NPM, depois vamos criar arquivos de configuração do Webpack e também o arquivo &lt;strong&gt;index.html&lt;/strong&gt;, que é onde vamos mostrar nossa App.&lt;/p&gt;

&lt;h3&gt;NPM&lt;/h3&gt;

&lt;p&gt;Como gerenciador de pacotes, vamos usar o NPM. Por isso, abra seu terminal predileto e veja os comandos abaixo. Esses comandos vão criar uma pasta para o projeto (eu já estou na minha pasta publica, onde coloco meus projetos para serem acessados via localhost), depois eu inicio o NPM e aí instalo dois pacotes iniciais &lt;strong&gt;react&lt;/strong&gt; e &lt;strong&gt;react-dom&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir meu-projeto
&lt;span class="gp"&gt;$ &lt;/span&gt;npm install --save react react-dom
&lt;span class="gp"&gt;$ &lt;/span&gt;npm init &lt;span class="c"&gt;# aperte enter em tudo que vier&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Agora, dentro da pasta &lt;strong&gt;meu-projeto&lt;/strong&gt; deve haver um &lt;strong&gt;package.json&lt;/strong&gt; que o NPM instalou. Vamos instalar agora o Webpack. O Webpack é o que vai juntar todos os nossos módulos, compilar nosso CSS e etc.&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;meu-projeto
&lt;span class="gp"&gt;$ &lt;/span&gt;npm install --save-dev webpack
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Nós vamos instalar o &lt;strong&gt;webpack&lt;/strong&gt; apenas em desenvolvimento, por que, obviamente vamos usar o código que ele gerar em produção. Mas vamos aproveitar para instalá-lo também globalmente, por que vamos precisar rodar o comando &lt;code&gt;webpack&lt;/code&gt; para gerar nosso bundle:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$  &lt;/span&gt;npm install webpack -g
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Seu &lt;strong&gt;package.json&lt;/strong&gt; tem que ficar mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"curso-react-matheus"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"main"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"scripts"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"license"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"dependencies"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^15.3.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"react-dom"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^15.3.2"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;"devDependencies"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"webpack"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^1.13.2"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Config do Webpack&lt;/h3&gt;

&lt;p&gt;O webpack é um empacotador de código focado em módulos. Você pode ver com mais detalhes sobre o que é o webpack &lt;a href="http://tableless.com.br/introducao-ao-webpack/"&gt;nesse artigo do Leo Cavalcante no Tableless&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como já instalamos anteriormente o webpack com o NPM, vamos criar agora um &lt;strong&gt;webpack.config.js&lt;/strong&gt;. Aqui é onde vamos ter as configurações do Webpack. O Matheus, em seu vídeo, simplificou ao máximo as explicações que não ficasse confusa, tendo que explicar Redux, Flux, ES6 e etc, por isso, vamos fazer o mesmo aqui. Assim facilita seu aprendizado.&lt;/p&gt;

&lt;p&gt;O código do config do Webpack é esse aqui:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"./app/App.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"public/bundle.js"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'babel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;O Matheus explicou tim tim por tim tim cada uma dessas linhas no segundo vídeo do curso dele. Por enquanto, você só precisa saber o seguinte: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;entry: &amp;quot;./app/App.js&amp;quot;,&lt;/code&gt; vai ler o arquivo App.js, gerando um &lt;strong&gt;output&lt;/strong&gt; chamado &lt;strong&gt;bundle.js&lt;/strong&gt;. Aproveite para criar agora o &lt;strong&gt;App.js&lt;/strong&gt;, dentro de uma pasta &lt;strong&gt;app&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;O React usa o conceito de Loaders. Não vamos ver isso agora. Mas no bloco &lt;code&gt;loaders&lt;/code&gt; desse código, ele vai testar todos os arquivos &lt;strong&gt;.js&lt;/strong&gt;, menos a pasta &lt;strong&gt;node_modules&lt;/strong&gt;, usando o &lt;strong&gt;babel&lt;/strong&gt; para fazer o transpiler. Ali nos presets, estamos dizendo que vamos usar react. Se fossemos usar ES6 no código, nós colocaríamos também ali no chave &lt;code&gt;presets&lt;/code&gt;, para que o babel soubesse que ele também teria que pegar código ES6 para poder transpor para código conhecido.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora, para que o babel funcione, vamos instalá-lo também via NPM:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;npm install --save-dev babel-core babel-loader babel-preset-react
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;E por enquanto, é isso que você precisa saber.&lt;/p&gt;

&lt;h3&gt;index.html&lt;/h3&gt;

&lt;p&gt;Todo os projetos React tem um &lt;strong&gt;index.html&lt;/strong&gt; que faz a conexão com o nosso código. Esse &lt;strong&gt;index.html&lt;/strong&gt; é onde o App vai aparecer e ele deve ficar dentro da pasta &lt;strong&gt;public&lt;/strong&gt;. Crie então uma pasta &lt;strong&gt;public&lt;/strong&gt; e dentro coloque o arquivo &lt;strong&gt;index.html&lt;/strong&gt;. O código é mais ou menos esse. Também tendo em mente a simplicidade da explicação. Não inserirmos nada de outro mundo aqui:&lt;/p&gt;
&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"pt-br"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;O div APP é onde vamos renderizar a aplicação. É quase que padrão usar o nome &lt;code&gt;app&lt;/code&gt; ali. Mas você pode colocar qualquer outra coisa se quiser.&lt;/p&gt;

&lt;p&gt;Depois chamamos o JavaScript da nossa app, que vai estar tudo contido num arquivo só, que as vezes se chama &lt;code&gt;all.js&lt;/code&gt;, outras &lt;code&gt;bundle.js&lt;/code&gt;, outros &lt;code&gt;app.js&lt;/code&gt;. Tanto faz. Vamos usar &lt;code&gt;bundle.js&lt;/code&gt;, só para não ficar diferente dos artigos que li e do vídeo que o Matheus fez. Assim quando você for procurar mais referências, não fica confuso. E pronto.&lt;/p&gt;

&lt;h2&gt;App.js e Hello World&lt;/h2&gt;

&lt;p&gt;Vamos começar a nossa App fazendo dois &lt;code&gt;require&lt;/code&gt;. O require vai importar para nosso código o &lt;strong&gt;react&lt;/strong&gt; e o &lt;strong&gt;react-dom&lt;/strong&gt; que instalamos aquela hora com NPM. Abra seu &lt;strong&gt;App.js&lt;/strong&gt; e escreva:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importa a lib react&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reactDOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'react-dom'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importa a lib react-dom&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Com esses dois pacotes importados, vamos agora colocar um código inicial. Nesse código vamos usar o &lt;code&gt;reactDOM&lt;/code&gt;, que vai pegar nosso código HTML escrito em JSX e jogar naquele div com id &lt;code&gt;app&lt;/code&gt; que fizemos no &lt;strong&gt;index.html&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importa a lib react&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reactDOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'react-dom'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importa a lib react-dom&lt;/span&gt;

&lt;span class="nx"&gt;reactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;, document.getElementById&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;'app'&lt;/span&gt;&lt;span class="se"&gt;))&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Pra ver funcionando, lá no seu terminal, rode o comando abaixo na pasta do projeto:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;webpack -w
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Ele vai gerar um bundle todas as vezes que você salvar algo no projeto. Você poderá acessar o &lt;strong&gt;index.html&lt;/strong&gt; pelo seu browser. No meu Mac eu acessei nesse endereço &lt;strong&gt;http://localhost/curso-react-matheus/public/index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O Tutorial puro do ReactJS sugere rodar um server. Exatamente por que eles não mostram o processo usando Webpack. Contudo, se quiser, segue aí as instruções. &lt;a href="https://github.com/reactjs/react-tutorial/#to-use"&gt;Entre nesse link e rode um dos servidores&lt;/a&gt;. É só baixar um dos arquivos da linguagem que mais te agrada e rodar o comando para que o servidor rode.&lt;/p&gt;

&lt;p&gt;Crie uma pasta, baixe o arquivo preferencial e rode o comando correspondente. Ex.: &lt;code&gt;php server.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sugiro que fique conosco aqui no Webpack, assim você não se perde no processo. Nesse momento, você já deve ter rodado seu primeiro &lt;strong&gt;Hello World&lt;/strong&gt; com React, usando Webpack.&lt;/p&gt;

&lt;h3&gt;Importando seu primeiro módulo&lt;/h3&gt;

&lt;p&gt;Para importar seu primeiro módulo, lá no &lt;strong&gt;App.js&lt;/strong&gt;, vamos criar uma variável que faz a importação do nosso componente. O arquivo desse componente estará na pasta &lt;strong&gt;components&lt;/strong&gt;, dentro da pasta &lt;strong&gt;App&lt;/strong&gt;. A estrutura de pastas fica assim:&lt;/p&gt;

&lt;p&gt;&lt;img src="assets/images/iniciando-react/folders-react.png" /&gt;&lt;/p&gt;

&lt;p&gt;O seu App.js fica assim:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importa a lib react&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reactDOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'react-dom'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// importa a lib react-dom&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MeuComponente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./components/MeuComponente.js’);

reactDOM.render(&amp;lt;MeuComponente /&amp;gt;, document.getElementById('&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Criando seu primeiro componente&lt;/h3&gt;

&lt;p&gt;Dentro da pasta &lt;strong&gt;components&lt;/strong&gt;, crie um arquivo chamado &lt;strong&gt;MeuComponente.js&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; Como boas práticas e uma convenção comum nos projetos, nós colocamos o nome do arquivo do componente como sendo o mesmo nome do componente dentro do código. O nome do arquivo poderia ser diferente do nome do componente, mas aí o risco de bagunça seria enorme. Por isso, mantenha o nome do arquivo do componente sendo igual ao nome do componente no código. &lt;/p&gt;

&lt;p&gt;Voltando… dentro desse componente você vai escrever o código básico de todo o componente, que é o código que segue abaixo:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importa a lib react&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MeuComponente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClass&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;teste&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MeuComponente&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Todos os componentes react vão ter esse código. Primeiro ele importa a lib do React. Depois nós criamos uma classe (&lt;code&gt;React.createClass&lt;/code&gt;) onde construíremos nosso Componente. E aí, exportamos (&lt;code&gt;module.exports = MeuComponente&lt;/code&gt;) nosso Componente para importá-lo em outras partes do projeto, como fizemos no App.js. &lt;/p&gt;

&lt;p&gt;Dentro a classe do seu componente, perceba que há uma função &lt;strong&gt;render&lt;/strong&gt;. Essa função irá transformar o código JSX que estiver ali dentro no seu componente e irá renderizá-la na tela.&lt;/p&gt;

&lt;p&gt;Perceba uma curiosidade: Por que precisamos de um parênteses em volta do return? O JavaScript insere o sinal de ponto-virgula (;) automaticamente. Sem os parênteses, o JavaScript ignoraria as linhas seguintes e não retornaria valor algum. Se o JSX começa na mesma linha que o return, então os parênteses não são necessários.&lt;/p&gt;

&lt;p&gt;Se você for no seu browser e mudar o texto do seu componente, você vai perceber que nosso componente está funcionando! ;-D&lt;/p&gt;

&lt;p&gt;&lt;img src="assets/images/iniciando-react/gif-react.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Bom, vou ficando por aqui. O objetivo era apenas fazer um setup rápido, para você conseguir inserir pelo menos um componente e ver as coisas mudando na tela. Talvez as coisas tenham ficado mais claras para você agora, assim como ficaram para mim depois desse estudo. Sugiro que você veja os links abaixo para aprofundar mais seus estudos. Tem conteúdo em ingles e também conteúdo em português. Vá fundo!&lt;/p&gt;

&lt;h2&gt;Leitura recomendada:&lt;/h2&gt;

&lt;p&gt;Algumas leituras eu perdi, outras estão por aí. Todos esses links me ajudaram a entender um bocado sobre o setup do React, seus módulos, inserir CSS, modularização e etc. Praticamente todos eles explicam as mesmas coisas, com palavras diferentes detalhes diferentes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/react/tutorial/tutorial.html"&gt;Documentação do React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tutorialspoint.com/reactjs/reactjs_environment_setup.htm"&gt;React Environment Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.andrewray.me/reactjs-for-stupid-people/"&gt;React for Stupid People&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jamesknelson.com/learn-raw-react-no-jsx-flux-es6-webpack/"&gt;Learn React by itsel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jviereck/modularise-css-the-react-way-1e817b317b04"&gt;Modularise CSS the React way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hugogiraudel.com/2015/06/18/styling-react-components-in-sass/"&gt;Style React Components in SASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://survivejs.com/react/advanced-techniques/styling-react/"&gt;Style React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://buildwithreact.com/tutorial/components"&gt;http://buildwithreact.com/tutorial/components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jscasts.teachable.com/"&gt;Curso do Matheus Lima em Português&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hugobessa.com.br/2015/01/17/comecando-com-react/"&gt;Começando com React - Hugo Bessa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html"&gt;The React Quick Starter Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/danawoodman/9cfddb1a0c934a35f31a"&gt;React Hello World Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tylermcginnis.com/react-js-tutorial-pt-1-a-comprehensive-guide-to-building-apps-with-react-js-8ce321b125ba#.wn4e2ymf3"&gt;React.js Tutorial Pt 1: A Comprehensive Guide to Building Apps with React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/react"&gt;GitHub do projeto React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/tableless/organizando-uma-aplicação-com-react-5b8ea9075596#.3q8sxog55"&gt;Organizando uma aplicação com React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@ignit.io/react-native-construindo-apps-nativos-com-javascript-parte-1-37af2fbcde84#.muc6c8dyv"&gt;React Native — Construindo Apps Nativos com Javascript (parte 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fnando/react-starter-pack"&gt;Starter Pack para React do Nando&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Review de Livro - TED Talks - O Guia Oficial do TED para falar em Publico</title>
    <link rel="alternate" href="http://diegoeis.com/review-de-livro-ted-talks-o-guia-oficial-do-ted-para-falar-em-publico.html"/>
    <id>http://diegoeis.com/review-de-livro-ted-talks-o-guia-oficial-do-ted-para-falar-em-publico.html</id>
    <published>2016-10-20T22:00:00-02:00</published>
    <updated>2016-10-22T11:48:19-02:00</updated>
    <author>
      <name>Diego Eis</name>
    </author>
    <content type="html">&lt;p&gt;Ganhei do &lt;a href="http://twitter.com/phsilbr"&gt;Pablo Silva&lt;/a&gt; o livro &lt;strong&gt;TED Talks: O Guia Oficial do TED para falar em público&lt;/strong&gt;. Aqui segue minhas anotações do livro. Não anotei tudo, exatamente se não fica sendo um spoiler gigante. Mas tem um resumo no &lt;a href="http://fourminutebooks.com/talk-like-ted-summary/"&gt;Four Minutes Books&lt;/a&gt;. ;-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se você sabe conversar com amigos em uma mesa de jantar, também sabe falar em público&lt;/li&gt;
&lt;li&gt;Por mais que você ache que não consegue falar em público, existem medidas para reverter esse quadro&lt;/li&gt;
&lt;li&gt;Você não precisa ser alguém diferente, você precisa ser você mesmo. &lt;/li&gt;
&lt;li&gt;Não tente falar diferente do que você realmente fala com públicos pequenos.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;competência comunicativa&lt;/strong&gt; não é um extra opcional reservado a umas poucas pessoas&lt;/li&gt;
&lt;li&gt;Por causa da tecnologia, hoje não é necessário falar na frente de milhares de pessoas ao mesmo tempo para exercer influência&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a obrigação número um de um palestrante é reconstruir na mente de seus ouvintes algo que lhe importa&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A ideia que você quer passar deve ser algo capaz de mudar a visão de mundo das pessoas&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Estilo sem conteúdo é horrível.&lt;/li&gt;
&lt;li&gt;Para se conhecer melhor, você precisa ter conversas francas com aqueles que vivem com você, sobre como você. Eles conhecem algumas características sobre você, melhor do que voce mesmo&lt;/li&gt;
&lt;li&gt;a linguagem só produz sua magia que do partilhada entre falante e ouvinte. Os termos precisam ser previamente conhecidos pelos ouvintes e profundamente dominados pelos falantes&lt;/li&gt;
&lt;li&gt;Você só pode usar as ferramentas que a plateia tem acesso.&lt;/li&gt;
&lt;li&gt;Se você usar seus termos, seus conceitos, seus valores, sua palestra não terá sucesso&lt;/li&gt;
&lt;li&gt;Uma pesquisa de 1967 feita pelo Professor Albert Mehrabian diz que apenas 7% da eficácia da comunicação decorrem da linguagem, enquanto 38% dependem do tom de voz e 55% da linguagem corporal &lt;/li&gt;
&lt;li&gt;No entanto a essência de uma palestra depende fundamentalmente das palavras &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;o palestrante deve fazer uma doação a seus ouvintes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Excesso de temas é igual a sub exposição.&lt;/li&gt;
&lt;li&gt;Divagações são comuns em palestras ruins. Não enrole, mostre uma direção para a plateia sem divagar antes sobre qualquer outro assunto. Exemplo: “estive pensando no que falar pra vocês quando estava dirigindo pra cá&amp;hellip;”&lt;/li&gt;
&lt;li&gt;Falar sobre a complexidade da organização da sua equipe, empresa, produto etc pode ser interessante pra quem está trabalhando nesses locais, mas não é para plateia. Em geral, palestras assim são tediosas. &lt;strong&gt;Concentre-se na natureza do seu trabalho, não como ele está organizado ou nos seus produtos&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;você não copia inspiração de outra pessoa. Você não produz inspiração. A inspiração é como o amor, você não alcança quando decide buscá-lo. Não tente controlar a motivação ou a inspiração da plateia. Deixe que isso surja espontaneamente de acordo com seu assunto e sua personalidade &lt;/li&gt;
&lt;li&gt;Tenha uma &lt;strong&gt;linha mestra&lt;/strong&gt; bem definida. Uma linha mestra é como uma manchete. Ela deve ser a primeira coisa que a plateia precisa ouvir, para atrair a atenção e a essência do assunto a ser debatido&lt;/li&gt;
&lt;li&gt;A linha mestra define o que você quer dizer. É o tema que une os elementos narrativos. É como o laço do presente que é amarrado antes do presente estar pronto. &lt;/li&gt;
&lt;li&gt;o jeito errado de condensar sua palestra é tentar falar de todos os assuntos que você acha pertinente, com medo de algo ficar de fora.&lt;/li&gt;
&lt;li&gt;Se você tenta falar de tudo, com tempo limitado pra cada um Dos temas, sua palestra fica superficial. Tente separar poucos assuntos dentro do seu tema para se aprofundar, instigando a curiosidade do público.&lt;/li&gt;
&lt;li&gt;Para uma palestra usando &lt;strong&gt;persuasão&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;injete algum humor no início&lt;/li&gt;
&lt;li&gt;Acrescente um caso real&lt;/li&gt;
&lt;li&gt;De exemplos eloquentes&lt;/li&gt;
&lt;li&gt;Busquei aval de terceiros&lt;/li&gt;
&lt;li&gt;Use recursos visuais impactantes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Anotações da palestra do Dave Raggett na Web.br 2016</title>
    <link rel="alternate" href="http://diegoeis.com/anotacoes-da-palestra-do-dave-ragget-na-web-br-2016.html"/>
    <id>http://diegoeis.com/anotacoes-da-palestra-do-dave-ragget-na-web-br-2016.html</id>
    <published>2016-10-12T21:00:00-03:00</published>
    <updated>2016-10-22T11:48:19-02:00</updated>
    <author>
      <name>Diego Eis</name>
    </author>
    <content type="html">&lt;p&gt;Essas são as minhas anotações da palestra Internet das Coisas na Web (IoTw) que o &lt;a href="https://www.w3.org/People/Raggett/"&gt;Dave Raggett&lt;/a&gt; fez no evento Web.br 2016. Cheguei meio pro final, não deu pra anotar muita coisa.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Challenges for IoT and Big Data&lt;/li&gt;
&lt;li&gt;Muitos sensores geram uma quantidade enorme de dados, por isso a Big Data será tão importante num ambiente como esse.&lt;/li&gt;
&lt;li&gt;A segurança na era do IoT preocupa a todos&lt;/li&gt;
&lt;li&gt;Uma segurança forte depende de compreensao e aderente às novas práticas&lt;/li&gt;
&lt;li&gt;Quando temos um dispositivo, nós precisamos ter confiança entre quem está nos dando esse dispositivo, isso é necessário para que a IoT funcione de verdade no nível de segurança&lt;/li&gt;
&lt;li&gt;É necessário assegurar que os sistemas que rodam no IoT sejam seguros, não apenas sobre invasões e ataques, mas também fisicamente, como por exemplo num carro: você precisa que esse carro seja seguro o tempo inteiro, até mesmo houver uma falha no sistema.&lt;/li&gt;
&lt;li&gt;Segurança, Confiança, Resiliência.&lt;/li&gt;
&lt;li&gt;Privacidade é uma área muito importante na área de IoT&lt;/li&gt;
&lt;li&gt;IoT tem um grande potencial para troca informações pessoais entre indivíduos e os dispositivos. Há um risco direto para qualquer indivíduo ter seus dados pessoais roubados por criminosos, empresas ou até o governo.&lt;/li&gt;
&lt;li&gt;As empresas precisam aderir a melhores práticas para evitar danos na sua reputação, caso dados pessoais de seus clientes sejam roubados por problemas em seus sistemas&lt;/li&gt;
&lt;li&gt;É necessário também criar um conceito de espaço pessoal virtual, onde indivíduos tem respeito e entendem a importância da não utilização dos dados pessoais de outros indivíduos&lt;/li&gt;
&lt;li&gt;O HTTP não é a solução para tudo. Ele é bom para usarmos como modo push ou pull na internet de hoje e em dia. &lt;/li&gt;
&lt;li&gt;Em IoT precisamos fazer streaming por exemplo, de um dispositivo para vários clientes, aí entra o Web Sockets, que permite essa comunicação de um pra muitos de forma rápida. &lt;/li&gt;
&lt;li&gt;Se voltarmos lá no início da internet, preocupações com segurança da privacidade não era um foco.&lt;/li&gt;
&lt;li&gt;As pessoas hoje estão experimentando a IoT, e essa preocupação com a segurança tem aumentado. Existe uma &lt;a href="https://iotsecurityfoundation.org"&gt;Fundação de Segurança da Internet das Coisas&lt;/a&gt;. Hoje estamos bem no início sobre esse assunto… Estamos na fase que envolve concientização das pessoas e das empresas.&lt;/li&gt;
&lt;li&gt;Nesse início, as empresas tentarão controlar esse mercado, como naturalmente acontece. Mesmo assim, a centralização dos dispositivos de uma empresa apenas não é um problema.&lt;/li&gt;
&lt;li&gt;A W3C não entra em questões de política, por isso ela não pode regular exatamente o que os governos estão fazendo, mas todos os governos precisam discutir com a população sobre como eles podem implementar leis que funcionem num ambiente como esse que está por vir&lt;/li&gt;
&lt;li&gt;Como a retrocompatibilidade funcionará no mundo da IoT? Essa é uma das maravilhas da internet de hoje e como funciona isso na IoT?&lt;/li&gt;
&lt;li&gt;A escalabilidade tanto no tempo, como nas funcionalidades, é importante para que haja a retrocompatibilidade de arquiteturas e linguagens. É por isso que a formação de camadas na arquitetura é importante. Os Scripts nos aplicativos precisam funcionar nos dispositivos de amanha. &lt;/li&gt;
&lt;li&gt;Se um protocolo deixa de ser usado, como fazemos? É necessário uma camada de metadados para que essa retrocompatibilidade das funcionalidade, protocolos, linguagens etc…&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Um pouco sobre a experiência de ir trabalhar sem carro</title>
    <link rel="alternate" href="http://diegoeis.com/um-pouco-sobre-a-experiencia-de-ir-trabalhar-sem-carro.html"/>
    <id>http://diegoeis.com/um-pouco-sobre-a-experiencia-de-ir-trabalhar-sem-carro.html</id>
    <published>2016-09-21T21:00:00-03:00</published>
    <updated>2016-10-22T11:50:41-02:00</updated>
    <author>
      <name>Diego Eis</name>
    </author>
    <content type="html">&lt;p&gt;Faz meses que tenho deixado o carro em casa e passado a usar transporte público para ir trabalhar. Não fiz isso por causa do valor que estou economizando por mês (que é bem pouco), mas por uma série de outros motivos.&lt;/p&gt;

&lt;p&gt;Desde o dia que eu deixei de usar o carro, consegui ler algo em torno de 22 livros. &lt;/p&gt;

&lt;div id="gr_challenge_3890" style="border: 2px solid #EBE8D5; border-radius:10px; padding: 0px 7px 0px 7px; max-width:230px; min-height: 100px"&gt;
  &lt;div id="gr_challenge_progress_body_3890" style="font-size: 12px; font-family: georgia,serif;line-height: 18px"&gt;
    &lt;h3 style="margin: 4px 0 10px; font-weight: normal; text-align: center"&gt;
      &lt;a style="text-decoration: none; font-family:georgia,serif;font-style:italic; font-size: 1.1em" href="https://www.goodreads.com/challenges/3890-2016-reading-challenge"&gt;2016 Reading Challenge&lt;/a&gt;
    &lt;/h3&gt;
        &lt;div class="challengePic"&gt;
          &lt;a href="https://www.goodreads.com/challenges/3890-2016-reading-challenge"&gt;&lt;img alt="2016 Reading Challenge" style="float:left; margin-right: 10px; border: 0 none" src="https://d2arxad8u2l0g7.cloudfront.net/challenges/1451432479p2/3890.jpg" /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;div&gt;
        &lt;a href="https://www.goodreads.com/user/show/50891723-diego-eis"&gt;Diego&lt;/a&gt; has
            completed his goal of reading
            9 books in
            2016!
      &lt;/div&gt;
      &lt;div style="width: 100px; margin: 4px 5px 5px 0; float: left; border: 1px solid #382110; height: 8px; overflow: hidden; background-color: #FFF"&gt;
        &lt;div style="width: 100%; background-color: #D7D2C4; float: left"&gt;&lt;span style="visibility:hidden"&gt;hide&lt;/span&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;div style="font-family: arial, verdana, helvetica, sans-serif;font-size:90%"&gt;
        &lt;a href="https://www.goodreads.com/user_challenges/3877191"&gt;22 of 9 (100%)&lt;/a&gt;
      &lt;/div&gt;
        &lt;div style="text-align: right;"&gt;
          &lt;a style="text-decoration: none; font-size: 10px;" href="https://www.goodreads.com/user_challenges/3877191"&gt;view books&lt;/a&gt;
        &lt;/div&gt;
  &lt;/div&gt;
  &lt;script src="https://www.goodreads.com/user_challenges/widget/50891723-diego-eis?challenge_id=3890&amp;v=2"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://www.goodreads.com/user_challenges/3877191"&gt;Link para o GoodReads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Além disso, estou bem menos estressado. Mesmo pegando algumas vezes o ônibus muito cheio ou tendo que esperar um bocado nos pontos. O que aconteceu é que eu me chateio facilmente com motoristas lerdos, pessoas imprudentes ou simplesmente fico cansado de estar parado por longos períodos no transito. O caminho &lt;strong&gt;casa&lt;/strong&gt; &amp;gt; &lt;strong&gt;trabalho&lt;/strong&gt; &amp;gt; &lt;strong&gt;casa&lt;/strong&gt; não é muito complexo e é praticamente uma reta, mas são 15km com vários pontos de parada.&lt;/p&gt;

&lt;h2&gt;O tempo&lt;/h2&gt;

&lt;p&gt;O tempo que eu passava no carro variava entre 1h a 1h20. Com o trânsito muito bom, consigo levar 45 minutos até trabalho. Mas isso é raro e só é possível em horários alternativos. De ônibus, consigo levar de 1h a 1h20 também. E nesse tempo, como falei, aproveito para ler livros, ler emails, ouvir podcasts, ouvir músicas ou simplesmente fico pensando na minha vida feliz. Isso tudo contribui para que eu torne o trajeto mais útil e menos estressante.&lt;/p&gt;

&lt;p&gt;Para me ajudar na adaptação, usei um aplicativo chamado Moovit. Ele me ajudou a encontrar várias linhas de ônibus que me fizeram economizar 20 minutos no trajeto casa &amp;gt; trabalho, reduzindo de 1h20 para 1h de viagem.&lt;/p&gt;

&lt;p&gt;A vantagem nesse caso foi conseguir basicamente 2 horas extras para leitura e fazer qualque outra atividade (inclusive jogar Hearthstone e Clash Royale). Comecei a assistir muito mais vídeos no TED também, além de conseguir escrever e esboçar artigos pelo celular. &lt;/p&gt;

&lt;h2&gt;Gasto&lt;/h2&gt;

&lt;p&gt;O gasto não foi a principal vantagem, já que não economizei o budget mensal planejado. Eu estava gastando algo em torno de R$350 por mês de gasolina. Hoje, R$167 desse valor é para pagar a passagem do ônibus, o resto eu coloco de gasolina, quando necessário. Eu não cheguei a economizar mensalmente, mas consegui atrasar a revisão do carro em 2 meses, já que o limite de quilometragem não foi alcançado.&lt;/p&gt;

&lt;p&gt;Eu costumo ir ao cinema com a minha mulher durante a semana. O percurso é mais ou menos esse:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;casa (ônibus) trabalho (ônibus) shopping (uber) casa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eu troquei os R$20 de estacionamento do shopping, pelo Uber, que dá o mesmo valor. &lt;/p&gt;

&lt;h2&gt;Por que não me desfiz do carro?&lt;/h2&gt;

&lt;p&gt;Eu não me desfiz do carro, por que não seria inteligente. De fim de semana, uso bastante o carro, já que saimos muito e visitamos muita gente. Além de que gostamos de viajar e nesse caso, o carro é bastante útil. Acho que a ideia de manter o carro em casa e usar outro modelo de transporte me ajudou a entender que não existe um meio de transporte perfeito. Dá para usar carro, Uber, bicicleta, ônibus e metrô de acordo com o trajeto e o seu planejamento.&lt;/p&gt;

&lt;p&gt;Durante muito tempo eu ouço pessoas com o discurso totalmente contra o carro e a favor da bicicleta (que não é uma opção real para todo mundo). Discordo totalmente dessa opinião. O mais inteligente é usar os vários tipos de modalidades de acordo com a sua necessidade no momento.&lt;/p&gt;

&lt;p&gt;Eu sei que em alguns lugares de São Paulo, o transporte é bem precário. Os ônibus são ruins, as linhas não são bem planejadas, causando lotação excessiva nos ônibus e também nos metros, já que a malha metroviária é bem restrita comparado com outras cidades do mundo, embora seja a maior em extensão no Brasil.&lt;/p&gt;

&lt;p&gt;Logo, me desfazer do carro seria bobeira, já que posso contar com ele para viajar e fazer passeios mais longos. O que planejo agora é ter, talvez, um carro menor, que gaste menos gasolina.&lt;/p&gt;

&lt;p&gt;Com essas adaptações, mais a facilidade de trabalhar em casa, fazendo alguns dias de home office, consigo ter inúmeras vantagens. Além de ficar mais saudável e normalmente mais disposto.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CSS - Cansei de Ser Simples – Podcast Hipsters 09</title>
    <link rel="alternate" href="http://diegoeis.com/podcast-css-cansei-de-ser-simples-hipsters-09.html"/>
    <id>http://diegoeis.com/podcast-css-cansei-de-ser-simples-hipsters-09.html</id>
    <published>2016-09-12T21:00:00-03:00</published>
    <updated>2016-10-22T11:50:41-02:00</updated>
    <author>
      <name>Diego Eis</name>
    </author>
    <content type="html">&lt;p&gt;O Paulo Silveira e o Sergio Lopes da Caelum Alura me convidaram esses dias para falar um pouco sobre CSS no podcast sobre tecnologia Hipsters! &lt;/p&gt;

&lt;p&gt;Nesse episódio, falamos um pouco sobre CSS, sua história, organização de arquivos, pré-processadores e várias coisas que envolvem essa coisa que amo de paixão, o CSS.&lt;/p&gt;

&lt;p&gt;Quer ouvir, dá o play aí!&lt;/p&gt;

&lt;iframe width="320" height="100" src="http://hipsters.tech/?powerpress_embed=373-podcast&amp;amp;powerpress_player=mediaelement-audio" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>BrazilJS 2016 - Sobre o básico de JSON-LD e Web Semântica</title>
    <link rel="alternate" href="http://diegoeis.com/braziljs-2016-sobre-o-basico-de-json-ld-e-web-semantica.html"/>
    <id>http://diegoeis.com/braziljs-2016-sobre-o-basico-de-json-ld-e-web-semantica.html</id>
    <published>2016-08-28T21:00:00-03:00</published>
    <updated>2016-10-23T12:04:57-02:00</updated>
    <author>
      <name>Diego Eis</name>
    </author>
    <content type="html">&lt;p&gt;Esses são os slides da minha palestra feita no BrazilJS de 2016.&lt;/p&gt;

&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/qRDOIDTV8mbs7C" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;img src="assets/images/braziljs-2016/2016-08-26-15.53.27.jpg" /&gt;
&lt;img src="assets/images/braziljs-2016/2016-08-26-15.57.04.jpg" /&gt;
&lt;img src="assets/images/braziljs-2016/2016-08-26-16.05.29.jpg" /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
