<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-07-05T21:00:00-03:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Linked Data e JSON-LD</title>
    <link rel="alternate" href="http://blog.url.com/linked-data-e-json-ld.html"/>
    <id>http://blog.url.com/linked-data-e-json-ld.html</id>
    <published>2016-07-05T21:00:00-03:00</published>
    <updated>2016-07-07T02:17:45-03:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Linked Data é um termo relativamente novo para todo o mundo de desenvolvimento, que apresenta apenas um caminho para publicar dados interconectados entre diferentes sites, possibilitando que um site referencie e reutilize dados de um outro site. Tipo, um buscador, reutilizando as informações do seu site para mostrar nos resultados da busca.&lt;/p&gt;

&lt;p&gt;JSON-LD (JavaScript Object Notation - Linked Data) é um formato baseado no já conhecido JSON, que todo mundo utiliza para transmitir dados entre o browser e o servidor. Ele virou &lt;a href="https://www.w3.org/TR/json-ld/"&gt;padrão do W3C&lt;/a&gt; em 2014. Obviamente, é um projeto aberto e você pode ver &lt;a href="https://github.com/json-ld/json-ld.org"&gt;todo o código no GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas antes de entrarmos em como esse negócio de JSON-LD funciona, queria falar um pouco sobre como a internet funciona. &lt;a href="http://diegoeis.com/organizando-a-informacao.html"&gt;Organização da Informação&lt;/a&gt; na web é um dos assuntos que mais me fascinam no mundo do desenvolvimento. Inclusive quando falamos sobre semântica e organização da informação de forma que não apenas humanos, mas computadores possam publicar e reutilizar essa informação livremente na web.&lt;/p&gt;

&lt;p&gt;Hoje a internet é baseada basicamente em código HTML, onde nós podemos mostrar imagens, vídeos, audios e principalmente textos, onde nós temos os links. Os links são o meio pelo qual nós organizamos toda a informação na internet, referenciando informações de um site para outro, em múltiplos websites.&lt;/p&gt;

&lt;p&gt;Nós podemos quebrar a internet em duas partes específicas: nós temos a parte onde nós enxergamos, que basicamente é baseada em HTML, CSS e JS. É onde seres humanos interagem com nosso produto e nosso site. 
Há também a segunda parte, que é formada basicamente por robôs e sistemas que também interagem com nossos produtos e sites, mas de forma diferente dos humanos, claro, consumindo dados que disponibilizamos de várias formas. Uma desses formatos é o JSON. Como alguns outros formatos, o JSON tem uma estrutura que é simples de ser lida por humanos e principalmente por robôs. &lt;/p&gt;

&lt;p&gt;Quando falamos sobre Linked Data, nós falamos sobre linkar informações entre websites. A maneira que fazemos isso hoje é basicamente com links. Isso resolve a parte de como os seres humanos conseguem relacionar um site (ou um punhado de informação), com outro site. Mas como conseguimos fazer com que as máquinas entendam esse relacionamento? Note que você é um ser humano, e você consegue saber quando um site sobre um determinado assunto contém um link que leva para um site de um assunto completamente diferente. Mas para máquina, se houver um link de um site para outro, não podemos dizer que eles são sites com o mesmo assunto ou com assuntos estreitamente relacionados. Um link para máquina, sempre vai ser um link. Ela vai precisar de mais informações para conseguir relacionar melhor as informações, tudo por causa do contexto. Como ser humano você consegue entender que o contexto mudou por causa dos textos, imagens e etc. Já as máquinas não.&lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido falar sobre RDFa. RDFa é um padrão básico para que possamos dar um pouco mais de contexto para as máquinas sobre os dados que elas estão consumindo. RDFa nada mais é do que um conjunto de atributos que colocamos em linguagens de marcação (HTML, XHTML, XML etc), de forma que as máquinas consigam entender que tipo de informação elas estão lidando. Algo como isso:&lt;/p&gt;
&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"dc:title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Um artigo sobre Semântica&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"dc:author"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Diego Eis&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Sim. Você já viu algo parecido quando estudou sobre Microformatos, &lt;a href="http://tableless.com.br/introducao-a-microdata-no-html5/"&gt;Micro Data&lt;/a&gt; e etc, que são modelos de dados muito mais amigáveis e inteligente do RDF/XML. Mas esse foi um dos primeiros modelos adotados pelo &lt;a href="https://www.w3.org/2001/sw/RDFCore/"&gt;W3C há muito tempo&lt;/a&gt; e por isso, talvez, só talvez, valha a pena você dar uma lida para entender o conceito.&lt;/p&gt;

&lt;p&gt;Deixando isso de lado, o que quero dizer é que nós marcamos esse tipo de informação, para que buscadores, redes sociais e qualquer outro tipo de sistema que precise de dados para funcionar, possa consumir os dados de forma mais inteligente. Então, enquanto as pessoas consomem HTML, lendo seus textos, vendo suas imagens e assistindo seus vídeos, as máquinas consomem esses dados vasculhando seu código procurando por algum significado.&lt;/p&gt;

&lt;h2&gt;O JSON-LD e o @context&lt;/h2&gt;

&lt;p&gt;Mas nós não conseguimos resolver de verdade como as máquinas consomem esses dados. Como eu disse, as máquinas precisam de mais detalhes sobre os dados que publicamos. Eu fiz uma apresentação falando sobre como melhoramos a semântica do código usando as &lt;a href="http://www.slideshare.net/diegoeis/a-verdadeira-semntica-do-html5"&gt;novas tags do HTML5 e microdata&lt;/a&gt;. Mas temos como melhorar isso, usando JSON-LD.&lt;/p&gt;

&lt;p&gt;Quando um sistema acessar seu site, ele vai receber um arquivo JSON, que contém informações sobre o assunto do seu site. O formato é praticamente idêntico ao JSON que você já deve conhecer, mas com alguns valores e chaves diferentes, veja:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"@context"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://json-ld.org/contexts/person.jsonld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"@id"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://dbpedia.org/page/Bob_Dylan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Bob Dylan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"born"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1941-05-24"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"spouse"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://dbpedia.org/resource/Sara_Dylan"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;O problema é quando você começa a receber esses dados de múltiplos websites. Todos eles oferecem dados como esse. Mas e se dois sites colocarem informações iguais em alguns valores? Por exemplo, um site fornece o seguinte dado:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Diego"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"homepage"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://diegoeis.com"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;E o outro:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"diegoeis"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"homepage"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://diegoeis.com"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Perceba que no primeiro exemplo, estamos falando sobre uma pessoa. Já no segundo exemplo, em vez do nome de alguém, está algo parecido com um nickname. O robô não tem como saber o que é cada coisa. É por isso que no JSON-LD tem um conceito chamado &lt;strong&gt;@context&lt;/strong&gt;. O &lt;strong&gt;@context&lt;/strong&gt; diz para a aplicação como interpretar o contexto daquelas informações. Perceba que sempre que você conversa com alguém na vida real, a conversa acontece em volta de um contexto. O exemplo legal ficaria assim:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"@context"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://json-ld.org/contexts/person.jsonld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Diego"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"homepage"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://diegoeis.com"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Mas e o Schema.org?&lt;/h3&gt;

&lt;p&gt;Ahh! Sabia que ia rolar essa pergunta. O &lt;a href="http://schema.org/"&gt;Schema.org&lt;/a&gt; é uma comunidade colaborativa, formada por buscadores como Google e Yahoo! para criar, manter e promover formatos de dados estruturados para a internet, ajudando a estruturar dados para emails, páginas, sistemas etc.&lt;/p&gt;

&lt;p&gt;O que é um vocabulário: imagina que você tem uma série de coisas para descrever para as máquinas, por exemplo: suponha um site sobre filmes. Você quer indicar para os sistemas de busca (ou qualquer outro tipo de sistema interessado), qual é o pedaço de texto na página que é a resenha do filme, qual imagem é o poster do filme etc. Você marcaria o HTML assim:&lt;/p&gt;
&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;itemscope&lt;/span&gt; &lt;span class="na"&gt;itemtype=&lt;/span&gt;&lt;span class="s"&gt;"http://schema.org/Movie"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.warnerbros.com/matrix"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Matrix&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;The best movie in the real world.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"director"&lt;/span&gt; &lt;span class="na"&gt;itemscope&lt;/span&gt; &lt;span class="na"&gt;itemtype=&lt;/span&gt;&lt;span class="s"&gt;"http://schema.org/Person"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Directed by: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;The Wachowskis&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Starring: 
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"actors"&lt;/span&gt; &lt;span class="na"&gt;itemscope&lt;/span&gt; &lt;span class="na"&gt;itemtype=&lt;/span&gt;&lt;span class="s"&gt;"http://schema.org/Person"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Laurence Fishburne&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"actors"&lt;/span&gt; &lt;span class="na"&gt;itemscope&lt;/span&gt; &lt;span class="na"&gt;itemtype=&lt;/span&gt;&lt;span class="s"&gt;"http://schema.org/Person"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Keanu Reeves&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Perceba que então, o Google, por exemplo, consegue saber o que é cada pedaço de dado da página. Assim ele consegue classificar melhor a informação.&lt;/p&gt;

&lt;p&gt;A ideia é o seguinte, o &lt;strong&gt;@context&lt;/strong&gt; serve para que você consiga especificar o vocabulário dos tipos e propriedades que você está servindo no seu documento. Ali no exemplo, eu usei o vocabulário que o próprio pessoal do JSON-LD publicou. Mas o Google, assim como outros sistemas de busca, apoiam largamente o uso do Schema.org,  que é um padrão de vocabulário. Fica assim:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"@context"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://schema.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"@type"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Person"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Diego"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"homepage"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://diegoeis.com"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Veja ali que a segunda chave é o tipo. O Schema.org fornece uma série de vocabulários, logo, preciso dizer qual é o tipo do vocabulário que eu estou me referindo.&lt;/p&gt;

&lt;p&gt;Perceba que &lt;strong&gt;@context&lt;/strong&gt; e o &lt;strong&gt;@type&lt;/strong&gt; definem o &amp;ldquo;significado&amp;rdquo; das outras chaves. Se fosse uma empresa, seria assim:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"@context"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://schema.org/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"@type"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Organization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"National Public Radio"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A chave &lt;strong&gt;name&lt;/strong&gt; ali agora se refere ao nome de uma Organização e não de uma pessoa. E assim segue com outras &amp;ldquo;coisas&amp;rdquo;.&lt;/p&gt;

&lt;h2&gt;E o Microdata?&lt;/h2&gt;

&lt;p&gt;Bom, se você usar o JSON-LD, você não precisa usar Microdata. O Google está investindo pesando com o JSON-LD, por isso, acho que você devia pensar em usá-lo. Outra coisa: para usar Microdata, você vai precisar mexer no seu código HTML para inserir os atributos necessários. Já com o JSON-LD isso não é necessário, já que você serve via JSON as partes necessárias das informações que você quer publicar.&lt;/p&gt;

&lt;h2&gt;Identificadores Globais do JSON-LTD&lt;/h2&gt;

&lt;p&gt;Mas não adianta usar uma terminologia curta, que máquinas e humanos entendam, contendo um contexto, se você ainda não consegue identificar exatamente qual o assunto da conversa. No exemplo acima, o assunto era uma pessoa chamada &lt;strong&gt;Diego&lt;/strong&gt;. Mas qual &lt;strong&gt;Diego&lt;/strong&gt;? Existem milhares deles por aí. Para fazer isso, o JSON-LD usa uma &lt;strong&gt;@id&lt;/strong&gt; para identificar globalmente esse assunto (que pode ser um animal, uma pessoa, um objeto etc).&lt;/p&gt;

&lt;p&gt;Logo, se alguém quiser falar sobre o &lt;strong&gt;Diego&lt;/strong&gt;, basta referenciar esse id específico.&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"@context"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://json-ld.org/contexts/person.jsonld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"@id"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://diegoeis.com/sobre"&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Diego"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"homepage"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://diegoeis.com"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Logo, existem três coisas principais que precisamos entender sobre o JSON-LD. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ele te dá um contexto para a informação. &lt;/li&gt;
&lt;li&gt;Ele usa uma terminologia e uma estrutura fácil para máquinas e humanos.&lt;/li&gt;
&lt;li&gt;Ele identifica o assunto para resolver a ambiguidade de informações.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Como eu sirvo o JSON-LD&lt;/h2&gt;

&lt;p&gt;Simples: basta chamar na sua página o JSON com as informações que você quer publicar. Veja abaixo um exemplo:&lt;/p&gt;
&lt;div class="highlight javascript"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"application/ld+json"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="s2"&gt;"@context"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://schema.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;"@type"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Article"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Um pouco sobre imagens para Web"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;"author"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"@type"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Person"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"por Diego Eis"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="s2"&gt;"datePublished"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2016-07-05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;"image"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://tableless.com.br/wp-content/uploads/2016/07/image-format.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;"articleBody"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;Queria&lt;/span&gt; &lt;span class="nx"&gt;falar&lt;/span&gt; &lt;span class="nx"&gt;um&lt;/span&gt; &lt;span class="nx"&gt;pouco&lt;/span&gt; &lt;span class="nx"&gt;sobre&lt;/span&gt; &lt;span class="nx"&gt;alguns&lt;/span&gt; &lt;span class="nx"&gt;formatos&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;imagens&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;usamos&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt; &lt;span class="nx"&gt;dias&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Dar&lt;/span&gt; &lt;span class="nx"&gt;algumas&lt;/span&gt; &lt;span class="nx"&gt;informa&lt;/span&gt;&lt;span class="err"&gt;çõ&lt;/span&gt;&lt;span class="nx"&gt;es&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;encontrei&lt;/span&gt; &lt;span class="nx"&gt;por&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="err"&gt;í&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Vamos&lt;/span&gt; &lt;span class="nx"&gt;explorar&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;duas&lt;/span&gt; &lt;span class="nx"&gt;principais&lt;/span&gt; &lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="err"&gt;çõ&lt;/span&gt;&lt;span class="nx"&gt;es&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;formato&lt;/span&gt; &lt;span class="nx"&gt;gr&lt;/span&gt;&lt;span class="err"&gt;á&lt;/span&gt;&lt;span class="nx"&gt;fico&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;pode&lt;/span&gt; &lt;span class="nx"&gt;ser&lt;/span&gt; &lt;span class="nx"&gt;usado&lt;/span&gt; &lt;span class="nx"&gt;na&lt;/span&gt; &lt;span class="nx"&gt;Web&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;representar&lt;/span&gt; &lt;span class="nx"&gt;gr&lt;/span&gt;&lt;span class="err"&gt;á&lt;/span&gt;&lt;span class="nx"&gt;ficos&lt;/span&gt; &lt;span class="nx"&gt;simples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nx"&gt;esquemas&lt;/span&gt; &lt;span class="nx"&gt;ou&lt;/span&gt; &lt;span class="nx"&gt;logotipos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Embora&lt;/span&gt; &lt;span class="nx"&gt;hoje&lt;/span&gt; &lt;span class="nx"&gt;possamos&lt;/span&gt; &lt;span class="nx"&gt;usar&lt;/span&gt; &lt;span class="nx"&gt;SVG&lt;/span&gt; &lt;span class="nx"&gt;em&lt;/span&gt; &lt;span class="nx"&gt;diversos&lt;/span&gt; &lt;span class="nx"&gt;momentos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nx"&gt;principalmente&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="err"&gt;í&lt;/span&gt;&lt;span class="nx"&gt;cones&lt;/span&gt; &lt;span class="nx"&gt;ou&lt;/span&gt; &lt;span class="nx"&gt;Logos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;PNG&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;GIF&lt;/span&gt; &lt;span class="nx"&gt;ainda&lt;/span&gt; &lt;span class="nx"&gt;podem&lt;/span&gt; &lt;span class="nx"&gt;ser&lt;/span&gt; &lt;span class="nx"&gt;usadas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Depois&lt;/span&gt; &lt;span class="nx"&gt;falamos&lt;/span&gt; &lt;span class="nx"&gt;mais&lt;/span&gt; &lt;span class="nx"&gt;sobre&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;SVG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;H3&amp;gt;GIF&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;H3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;GIF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sigla&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;Graphics&lt;/span&gt; &lt;span class="nx"&gt;Interchange&lt;/span&gt; &lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;foi&lt;/span&gt; &lt;span class="nx"&gt;desenvolvido&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;dos&lt;/span&gt; &lt;span class="nx"&gt;anos&lt;/span&gt; &lt;span class="mi"&gt;1980&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="nx"&gt;ainda&lt;/span&gt; &lt;span class="err"&gt;é&lt;/span&gt; &lt;span class="nx"&gt;amplamente&lt;/span&gt; &lt;span class="nx"&gt;utilizado&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;PNG&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Portable&lt;/span&gt; &lt;span class="nx"&gt;Network&lt;/span&gt; &lt;span class="nx"&gt;Graphics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;foi&lt;/span&gt; &lt;span class="nx"&gt;desenvolvido&lt;/span&gt; &lt;span class="nx"&gt;por&lt;/span&gt; &lt;span class="nx"&gt;volta&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="mi"&gt;1995&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tornou&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;uma&lt;/span&gt; &lt;span class="nx"&gt;recomenda&lt;/span&gt;&lt;span class="err"&gt;çã&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;W3C&lt;/span&gt; &lt;span class="nx"&gt;em&lt;/span&gt; &lt;span class="mi"&gt;1996&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="nx"&gt;tem&lt;/span&gt; &lt;span class="nx"&gt;sido&lt;/span&gt; &lt;span class="nx"&gt;amplamente&lt;/span&gt; &lt;span class="nx"&gt;implementado&lt;/span&gt; &lt;span class="nx"&gt;na&lt;/span&gt; &lt;span class="nx"&gt;maioria&lt;/span&gt; &lt;span class="nx"&gt;dos&lt;/span&gt; &lt;span class="nx"&gt;navegadores&lt;/span&gt; &lt;span class="nx"&gt;da&lt;/span&gt; &lt;span class="nx"&gt;Web&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="nx"&gt;em&lt;/span&gt; &lt;span class="mi"&gt;1998&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;O Google tem uma ferramenta sensacional que te ajuda a criar marcação de dados estruturados direto na sua página. &lt;a href="https://www.google.com/webmasters/markup-helper/u/0/"&gt;Olha aqui&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;Um pouco mais sobre Web Semântica&lt;/h2&gt;

&lt;p&gt;Essas coisas são as fundações do Linked Data. A Web Semântica é muito do que simplesmente organizar informação. Ela envolve também relacionar esses dados encontrados em diferentes pontos da internet, além de facilitar o consumo e a reutilização desses dados por máquinas e seres humanos.&lt;/p&gt;

&lt;p&gt;O Tim Berners-Lee &lt;a href="https://www.w3.org/DesignIssues/LinkedData.html"&gt;fala sobre os quatro passos (ou regras)&lt;/a&gt; para que os dados sejam interconectados na internet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identificar as coisas com URIs. Se a forma de identificar os dados não usam o formato universal de símbolos de URI, nós não podemos chamar isso de Web Semântica.&lt;/li&gt;
&lt;li&gt;Usar URI pelo protocolo HTTP é totalmente aceitável pela web inteira. Existe uma tendência gigante da criação de novos esquemas de URI como LSIDs, XRIs etc, se baseando em algo totalmente novo, por fora do DNS, impossibilitando o consumo da informação via formato não popular.&lt;/li&gt;
&lt;li&gt;É necessário ter acesso à informação via URIs. Basicamente você precisa acessar uma URI e encontrar a informação ali, pronta para ser reutilizada.&lt;/li&gt;
&lt;li&gt;Usar links para relacionar dados pela web.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Veja as regras se baseiam em fundações fortes da web hoje. Talvez essas fundações mudem. Mas não vai ser fácil. Veja o trabalho que é fazer para implementar o HTTP/2. Por isso creio que essas regras valerão durante muito tempo e serão ainda nossa baliza para poder servir informação de forma livre pela internet.&lt;/p&gt;

&lt;h3&gt;Para ler mais:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://json-ld.org/"&gt;Site oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://manu.sporny.org/2014/json-ld-origins-2/"&gt;JSON-LD and Why I Hate the Semantic Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thecustomizewindows.com/2014/08/json-ld-details/"&gt;JSON-LD in Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4x_xzT5eF5Q"&gt;Vídeo em ingles sobre Linked Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/json-ld/json-ld.org"&gt;Repositório do JSON-LD no GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://norman.walsh.name/2004/07/30/rdfxml"&gt;Is RDF/XML Good For Anything?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Deploy usando Hook do Git</title>
    <link rel="alternate" href="http://blog.url.com/deploy-usando-hook-do-git.html"/>
    <id>http://blog.url.com/deploy-usando-hook-do-git.html</id>
    <published>2016-07-03T21:00:00-03:00</published>
    <updated>2016-07-07T02:04:17-03:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Se você tem qualquer projeto pessoal, você já deve ter tido a necessidade de como fazer, de forma fácil, a automatização do deploy. Para tentar automatizar os meus projetos, eu tentei usar vários serviços como CodeShip, DeployBot e etc… Esses caras são bem legais, por que te dão uma série de integrações, históricos etc. Mas as vezes você nem precisa de tanto, você só quer dar um push no projeto local pro seu repositório remoto e esse repositório atualizar seu projeto em produção. E nada mais simples do que o &lt;strong&gt;git hooks&lt;/strong&gt; pra fazer isso.&lt;/p&gt;

&lt;p&gt;Vou mostrar mais ou menos como é o meu processo para atualizar meu &lt;a href="http://diegoeis.com"&gt;blog pessoal&lt;/a&gt;. A ideia é que você crie um repositório utilizando a flag &lt;code&gt;--bare&lt;/code&gt;. E aqui vale uma pequena explicação: geralmente, quando você cria um repositório git, você faz um &lt;code&gt;git init&lt;/code&gt; na sua máquina. O git cria uma pasta &lt;code&gt;.git&lt;/code&gt; dentro da sua pasta local, contendo todas as referências de mudanças e etc. Mas ainda esse código não está compartilhado com ninguém. Para você compartilhar, você precisa subir para um repositório, em algum lugar, por exemplo no GitHub. Quando você cria um repositório remoto lá no GitHub, você referencia seu projeto local com o repositório remoto assim:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;git remote add origin git@github.com:diegoeis/diegoeis.com.git
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Esse repositório remoto não é um repositório de trabalho, ele é um repositório que contém apenas as referências de mudanças do seu código e nada mais. Isso quer dizer que ele não tem os arquivos do seu projeto. Esse é um repositório apenas para compartilhamento, nada mais. É com esse link que todos os outros membros do seu time irão adicionar o projeto em suas máquinas.&lt;/p&gt;

&lt;p&gt;Nós vamos criar esse tipo de repositório na nossa máquina em produção, por que assim conseguimos configurar um hook para detectar quando submetermos uma alteração no nosso projeto. Para tanto, você precisa rodar o comando &lt;code&gt;git init --bare&lt;/code&gt; no seu servidor. Isso vai gerar um repositório nu, contendo apenas as referências e não os arquivos de trabalho. No meu server fiz assim:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;mkdir public/diegoeis.com.git
&lt;span class="nb"&gt;cd &lt;/span&gt;public/diegoeis.com.git
git init --bare
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, isso foi o suficiente para criar um repositório bare vazio. Ele vai ser o nosso &lt;code&gt;origin&lt;/code&gt; no nosso repositório local. Para tanto, fazemos assim na máquina local, dentro do seu projeto:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;diegoeis.com
git remote add origin meu_usuario_do_servidor@meu_dominio.com:/public/diegoeis.com.git
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, agora eu adicionei um repositório remoto ao meu projeto. Se você entender bem, você faz a mesma coisa quando vai clonar um projeto usando GitHub ou qualquer outro sistema de gerenciamento de Git como GitLab, Bitbucket etc. Só que eles criam o repositório bare para você.&lt;/p&gt;

&lt;p&gt;Feito isso, vamos voltar para o seu servidor, lá você vai clonar o seu projeto. Isso vai criar uma pasta normal, que você já conhece.&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;git clone public/diegoeis.com.git /var/www/diegoeis.com
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Git Hooks&lt;/h3&gt;

&lt;p&gt;Com esse “setup” feito, agora eu posso ir para o que importa, que é configurar meu hook. Lá no seu servidor, dentro do repositório bare que foi criado, encontre a pasta &lt;code&gt;hooks&lt;/code&gt;, e dentro dela tem um arquivo chamado &lt;code&gt;post-receive&lt;/code&gt;. Esse cara é o hook que vai detectar algo depois do recebimento de uma mudança. Você vai colocar esse código:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /public/diegoeis.com
env -i git reset —hard
env -i git pull origin master
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Bom, são comandos bash, simples: entra na pasta do meu site, reseta o repositório e faz um pull com as últimas alterações. Esse &lt;code&gt;env -i&lt;/code&gt; é um truque que faz os comandos serem executados na pasta que você entrou ali no seu comando bash. Se não houver esse &lt;code&gt;env -i&lt;/code&gt;, todos os comandos git que você rodar, vão tentar rodar na pasta fora do seu repositório. Colocando essa flag, isso não vai acontecer. O Felix Geisendörfer &lt;a href="http://debuggable.com/posts/git-tip-auto-update-working-tree-via-post-receive-hook:49551efe-6414-4e86-aec6-544f4834cda3"&gt;sofreu com isso e falou como funciona aqui nesse artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por último, você precisa tornar o &lt;strong&gt;post-receive&lt;/strong&gt; um arquivo executável rodando:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;chmod +x /public/diegoeis.com.git/hooks/post-receive
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Agora, toda vez que você fizer um git push para o seu repositório remoto, ele vai atualizar e mostrar algo mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;Counting objects: 19, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;19/19&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;19/19&lt;span class="o"&gt;)&lt;/span&gt;, 1.99 KiB | 0 bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total 19 &lt;span class="o"&gt;(&lt;/span&gt;delta 14&lt;span class="o"&gt;)&lt;/span&gt;, reused 0 &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
remote: HEAD is now at 9c1acad build
remote: From /public/diegoeis.com
remote:  &lt;span class="k"&gt;*&lt;/span&gt; branch            master     -&amp;gt; FETCH_HEAD
remote:    9c1adac..c1bc7ed  master     -&amp;gt; origin/master
remote: Updating 9c1adac..c1bc7ed
remote: Fast-forward
remote:  build/assets/css/style.css                       |  2 +-
remote:  build/feed.xml                                   | 12 ++++++———
remote:  build/index.html                                 |  2 +-
remote:  &lt;span class="nb"&gt;source&lt;/span&gt;/articles/organizando-a-informacao.html.md | 12 ++++++———
remote:  6 files changed, 21 insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;, 19 deletions&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;
To user@diegoeis.com:/public/diegoeis.com.git/
   9c1acad..c5bb7ed  master -&amp;gt; master
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;E quase que instantaneamente seu repositório em prod vai estar atualizado.&lt;/p&gt;

&lt;p&gt;O &lt;a href="http://www.akitaonrails.com/2010/02/13/deploy-com-git-push"&gt;Akita fez uma artigo em 2010&lt;/a&gt; (!) falando sobre o mesmo assunto e existem uma série de &lt;a href="https://githowto.com/bare_repositories"&gt;outros artigos&lt;/a&gt; pela internet explicando a mesma coisa, é só procurar. E porque eu quis fazer um artigo igual? Só por que eu nunca tinha feito algo assim. ;-D&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Um pouco sobre formatos de imagens</title>
    <link rel="alternate" href="http://blog.url.com/um-pouco-sobre-formatos-de-imagens.html"/>
    <id>http://blog.url.com/um-pouco-sobre-formatos-de-imagens.html</id>
    <published>2016-07-02T21:00:00-03:00</published>
    <updated>2016-07-03T20:28:41-03:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Queria falar um pouco sobre alguns formatos de imagens que usamos todos os dias. Dar algumas informações que encontrei por aí. Vamos explorar as duas principais opções de formato gráfico que pode ser usado na Web para representar gráficos simples, esquemas ou logotipos. Embora hoje possamos usar SVG em diversos momentos, principalmente para ícones ou Logos, o PNG e o GIF ainda podem ser usadas. Depois falamos mais sobre o SVG.&lt;/p&gt;

&lt;h3&gt;GIF&lt;/h3&gt;

&lt;p&gt;GIF (sigla para Graphics Interchange Format) foi desenvolvido no final dos anos 1980 e ainda é amplamente utilizado. PNG (Portable Network Graphics) foi desenvolvido por volta de 1995, tornou-se uma recomendação W3C em 1996, e tem sido amplamente implementado na maioria dos navegadores da Web, logo em 1998.&lt;/p&gt;

&lt;p&gt;O formato GIF é um formato que comprime arquivos usando um algoritmo chamado LZW, que mantêm traços das cores e ajuda a reduzir o tamanho do arquivo.
O formato suporta até 8 bits por pixel para cada imagem, permitindo que uma única imagem use até 256 cores diferentes, escolhidos a partir do espaço de cor RGB de 24 bits. Ele também suporta animações e permite uma paleta separada de até 256 cores para cada frame. Estas limitações de paleta tornam o formato GIF ruim para usar em fotos e outras imagens mais complexas, mas é bem adequado para imagens simples, tais como desenhos ou logotipos que tenham áreas de cor sólida. Tipo aqueles desenhos fazíamos no PaintBrush. ;-)&lt;/p&gt;

&lt;p&gt;O ponto forte de GIF é que ele é muito amplamente suportado e, portanto, bem estabelecida como a escolha padrão para gráficos simples na Web. Em comparação com as outras opções (especialmente PNG) GIF não é tecnicamente superior, mas durante os primeiros anos da Web, quando o suporte para PNG estava começando, era de fato uma escolha mais segura.&lt;/p&gt;

&lt;p&gt;Uma das questões que envolvem o formato GIF é que o algoritmo LZW foi protegido nos EUA por uma patente detida pela empresa Unisys. A patente Unisys LZW expirou nos EUA em 20 de junho de 2003. Essa patente da LZW também expirou no Canadá, França, Itália, Alemanha, Reino Unido e Japão. A versão original do GIF era chamado de 87a. &lt;a href="https://www.w3.org/Graphics/GIF/spec-gif87.txt"&gt;Se liga nessa spec do W3C&lt;/a&gt; de 15 de Junho de 1987. Aposto que alguns leitores nem tinha nascido. Eu já, tinha uns 4 anos.&lt;/p&gt;

&lt;h3&gt;PNG&lt;/h3&gt;

&lt;p&gt;PNG (Portable Network Graphics), um formato de arquivo de armazenamento portátil, bem compactada para imagens raster. PNG oferece um substituto livre de patentes para o GIF e também pode substituir muitos usos comuns do TIFF. De cores indexadas, transparência alpha e imagens truecolor são suportados.&lt;/p&gt;

&lt;p&gt;Para a Web, PNG realmente tem três vantagens principais sobre GIF:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;canais alfa (transparência variável). Eu ainda me lembro de usar algumas gambiarras para fazer o canal alfa funcionar no IE5.5 e IE6. :-)&lt;/li&gt;
&lt;li&gt;correção de multi-plataforma gama (controle de brilho da imagem) e correção de cor&lt;/li&gt;
&lt;li&gt;entrelaçamento bidimensional (um método de visualização e carregamento progressivo).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PNG também comprime melhor que GIF em quase todos os casos (5% a 25% em casos típicos). E você pode dizer: &amp;ldquo;Mas o GIF pode ser animado!&amp;rdquo; mas o PNG também pode: há um formato chamado MNG que se destina como um substituto para GIF animado, mas sem as limitações impostas pela GIF (por exemplo, animações de MNG podem ter profundidade de cor total e parcial ou total transparência). No entanto, quase não há navegadores suportam MNG (algumas versões do Mozilla fazer, mas a maioria não, e IE não) para MNG útil (ainda) não é como um formato web. Mas aí entra o &lt;a href="https://en.wikipedia.org/wiki/APNG#cite_note-20"&gt;APNG&lt;/a&gt;, que é outro formato que compete com o MNG, onde há um bom suporte em todos os navegadores. Contudo, não vejo muita gente usando ainda hoje.&lt;/p&gt;

&lt;p&gt;E aquele esquema de PNG8 e PNG24? Bom, PNG8 é uma abreviação para &amp;ldquo;8-bit PNG,&amp;rdquo; mas mais geralmente refere-se a imagens (colormapped) PNG baseada em paleta com 1, 2, 4 ou 8 bits pixels. Isto é, cada valor de pixel na imagem propriamente dita é 8 (ou menos) bits de profundidade, e que atua como um índice para um determinado valor de cor RGB de 24 bits na paleta. Uma imagem colormapped 1-bit pode referir-se a não mais de duas cores; uma imagem de 2 bits não podem ter mais do que quatro; uma imagem de 4-bit pode ter não mais do que 16; e uma imagem de 8 bits pode ter até 256 cores. Entenda que, ao contrário do GIF, as paletas do PNG podem ter qualquer número de entradas - pelo menos, até o máximo permitido pela profundidade de bits - Não apenas potências de dois.&lt;/p&gt;

&lt;p&gt;O PNG24, por outro lado, é uma abreviação para &amp;ldquo;PNG de 24 bits&amp;rdquo; e refere-se a imagens truecolor ou RGB (vermelho / verde / azul). Cada pixel em tais imagens é de 24 bits (3 bytes) de profundidade e diretamente especifica uma cor em vez de agir como um índice para uma tabela de pesquisa de cores (ou seja, uma paleta). Estas imagens, portanto, pode conter até 16,8 milhões de cores, embora os típicos tendem a usar não mais do que 50.000 ou assim.&lt;/p&gt;

&lt;p&gt;Quando você um logo simpels, ou um ícone e etc, você pode salvar como PNG8 que o resultado geralmente é melhor que GIF. Se você vê uma imagem, que não é uma foto, mas contém gradientes e uma mistura enorme de cores, você pode salvar como PNG24. Pode ser que você tenha uma compressão e qualidades melhor que JPG e com certeza é melhor que GIF. Além de ganhar o canal alpha (não, no PNG8 não dá para fazer canal alpha por causa da quantidade de cores).&lt;/p&gt;

&lt;h2&gt;Gargálo e outros formatos de imagem&lt;/h2&gt;

&lt;p&gt;Faz tempo que não salvo nenhum ícone ou imagem simples como GIF. O PNG sempre dá conta do trabalho, quase sempre tem compressões melhores e é compatível com todos os browsers hoje em dia. Mas imagem sempre foram um gargalo para quem trabalha com internet. Com a evolução das telas e monitores, a necessidade de usar imagens com melhor qualidade aumentou e por isso talvez os formatos de imagens tradicionais podem não servir durante muito tempo. &lt;/p&gt;

&lt;p&gt;O HTML tenta resolver parte do problema tentando te dar maneiras de servir imagens com mais ou menos qualidade ou de diferentes tamanhos dependendo dos dispositivos e etc. Há &lt;a href="http://www.slideshare.net/caelumdev/tudo-que-voc-precisa-saber-sobre-ltpicture-e-srcset"&gt;uma palestra bem legal do Sergio Lopes falando sobre isso&lt;/a&gt;. Embora isso tudo ajude, as imagens ainda precisam mudar.&lt;/p&gt;

&lt;h3&gt;A tentativa do Google - WebP&lt;/h3&gt;

&lt;p&gt;WebP é um formato de imagem moderna que fornece &amp;ldquo;lossless&amp;rdquo; (algoritmo de compressão sem perda de qualidade) superior e compressão para imagens na web. Usando WebP, desenvolvedores podem criar imagens menores, mais ricas e que tornam a web mais rápida. As imagens WebP são 26% menores em tamanho em comparação com PNGs, com 25-34% menos perdas de qualidade do que as imagens JPEG.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://tableless.com.br/wp-content/uploads/2016/07/compression-webp_lossy.png" alt="compression-webp_lossy" width="744" height="656" class="aligncenter size-full wp-image-55075" /&gt;&lt;/p&gt;

&lt;p&gt;O Lossless das imagens WebP suporta canais alpha com um custo de apenas 22% de bytes adicionais. Para os casos quando a compressão RGB é aceitável, WebP com perdas também suporta a transparência, normalmente fornecendo arquivos três vezes menores em comparação com PNG.&lt;/p&gt;

&lt;p&gt;A compressão do WebP utiliza codificação preditiva para codificar uma imagem, o mesmo método usado pelo codec de vídeo VP8 para comprimir keyframes em vídeos. Codificação preditiva usa os valores em blocos de pixels vizinhos para predizer os valores em um determinado bloco, em seguida, codifica apenas a diferença.&lt;/p&gt;

&lt;p&gt;Para melhorar a qualidade, a imagem é segmentada em áreas que têm características visivelmente semelhantes. Para cada um desses segmentos, os parâmetros de compressão (passos de quantização, força de filtragem, etc.) estão sintonizados de forma independente. Isso produz compressão eficiente redistribuindo bits, onde eles são mais úteis. &lt;/p&gt;

&lt;p&gt;Previsão de codificação é uma razão principal pelo qual o WebP pode ser melhor que o JPEG. Blocos de quantização adaptativa faz uma grande diferença também. A codificação aritmética booleana fornece 5% -10% de ganhos de compressão em comparação com a &lt;a href="https://en.wikipedia.org/wiki/Huffman_coding"&gt;codificação de Huffman&lt;/a&gt;, que é o algoritmo usado nas imagens JPEG (e também nos arquivos de MP3).&lt;/p&gt;

&lt;p&gt;O Google fez um &lt;a href="https://developers.google.com/speed/webp/docs/c_study"&gt;estudo comparativo&lt;/a&gt; que mostra alguns números interessantes.&lt;/p&gt;

&lt;p&gt;O Google explica &lt;a href="https://developers.google.com/speed/webp/docs/compression#lossy_webp"&gt;um monte de coisa técnica sobre o formato WebP&lt;/a&gt;. Se você tiver paciência para ler, vai ser bem legal, pelo menos para conhecer mais esse mundo maluco de algoritmos de compressão e etc. E esse é o &lt;a href="https://developers.google.com/speed/webp/"&gt;site oficial do WebP&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Okay, mas eu posso usar o que?&lt;/h2&gt;

&lt;p&gt;Você usa o que você quiser. Quer usar SVG para ícones, facilitando a visualização em aparelhos que tem tela retina e de alta qualidade? Vai fundo. Quer usar PNG em vez de GIF por que acha que é mais fácil de manter, sem problemas. Quer usar JPG em vez de WebP, por que sim? Beleza, não tem problema. O negócio é sempre utilizar o que é melhor para cada necessidade de imagem. Eu ainda salvo imagens, quando são fotos, em JPG. Não usei WebP de verdade ainda por causa do suporte no Safari e na indecisão do Mozilla. Mas uso PNG o tempo inteiro em vez de usar GIF.&lt;/p&gt;

&lt;p&gt;Esse ainda da muito pano para manga e está longe de acabar&amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Performance Web - Rail</title>
    <link rel="alternate" href="http://blog.url.com/performance-web-rail.html"/>
    <id>http://blog.url.com/performance-web-rail.html</id>
    <published>2016-06-25T21:00:00-03:00</published>
    <updated>2016-06-26T21:09:01-03:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Minhas anotações da palestra do sobre performance web do Sergio Lopes, feito no Encontro Locaweb 2016.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Otimização de web se resume em mitificar css/js, comprimir HTML, gzip, concatenar CSS/JS, sprites, cache/expires, otimizar imagens, colocar scripts no fim da página e CSS no topo, trabalhar com assíncrono, lazy load, usar CDN, diminuir cookies, coisas desse tipo. Quem já usou alguma dessas práticas?&lt;/li&gt;
&lt;li&gt;O que é performance exatamente? Qual é o tempo ideal para um site carregar? O que é carregar um site? Carregar o netflix é carregar o video inteiro do filme? Quem te fala que seu site está rápido?&lt;/li&gt;
&lt;li&gt;Medir se o site que está rápido ou não, ou seja, pelo Onload, é uma péssima ideia.&lt;/li&gt;
&lt;li&gt;SPA já quebra essa métrica, porque carrega uma vez e não dispara o onload de novo.&lt;/li&gt;
&lt;li&gt;Nós temos vários tipos de performance:

&lt;ol&gt;
&lt;li&gt;Performance de carregamento. Quando clica e o browser faz alguma coisa.&lt;/li&gt;
&lt;li&gt;Interação. O cara clica num botão e aí abre uma modal. isso é uma interação. É a interação dos usuários com os eventos da página.&lt;/li&gt;
&lt;li&gt;Animação. Quanto tempo demora para a animação rodar. Dá umas travadas?&lt;/li&gt;
&lt;li&gt;Memória. O browser da crash por causa da falta de memória.&lt;/li&gt;
&lt;li&gt;Bateria. Sua aplicação mata a bateria do usuário porque fica consumindo os recursos da máquina (celular) o tempo inteiro?&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Quais são os limites da percepção de performance do usuário? A pesquisa chegou em 3 números: 100ms, 1s e 10s.&lt;/li&gt;
&lt;li&gt;quando algo acontece algo em 100ms, nosso cérebro acha que aquilo é instantâneo. &lt;/li&gt;
&lt;li&gt;Quando demora até 1s, seu cérebro já sabe que existe uma diferença, que há uma certa lentidão. O cérebro repara que algo aconteceu. Mas seu cérebro consegue dizer que ainda estamos numa mesma tarefa, embora exista um delay.&lt;/li&gt;
&lt;li&gt;Depois de 10s, seu cérebro entende que acabou a tarefa. Não há uma ação e reação. Se o site demora pra carregar, ele abre uma aba do facebook para esperar e pronto, esqueceu seu site.&lt;/li&gt;
&lt;li&gt;RAIL: Response Animation Idle Load, é um modelo de performance que quebra o modelo de performance em 4 pontos.&lt;/li&gt;
&lt;li&gt;a ideia é quebrar cada uma das ações na sua página nessas quatro categorias.
## Load&lt;/li&gt;
&lt;li&gt;Quando o cara dá enter na URL, dá para carregar instantaneamente? Difícil… Mas talvez dá carregar tudo em 1s. Dado aqueles limites de tempo psicológicos que vimos acima.&lt;/li&gt;
&lt;li&gt;http://webpagetest.org&lt;/li&gt;
&lt;li&gt;O que realmente importa nesses números que as páginas de métricas de performance trazem?&lt;/li&gt;
&lt;li&gt;meça a sensação do usuário de que há alguma coisa na tela. First Minimum Paint. &lt;/li&gt;
&lt;li&gt;Preste atenção no tempo de Start Render. Isso significa quando o browser começou a renderizar alguma coisa. Tente manter esse número perto do 1s.&lt;/li&gt;
&lt;li&gt;O SpeedIndex é o número que vocÊ realmente quer diminuir. Ele mostra quando a página mostrada para o usuário (o topo, antes da dobra, antes do primeiro scroll), para de carregar coisas&lt;/li&gt;
&lt;li&gt;Critical Rendering Path&lt;/li&gt;
&lt;li&gt;tira o JS da primeira renderização. Fácil; basta chamar os JS no final da página. O grande bloqueador é o CSS. &lt;/li&gt;
&lt;li&gt;Entregue tudo que esteja acima da dobra até um segundo. &lt;/li&gt;
&lt;li&gt;Use um CSS inline acima da dobra. &lt;/li&gt;
&lt;li&gt;&amp;lt; 14Kb é um RTT (Road Trip) do servidor.&lt;/li&gt;
&lt;li&gt;Ao invés do inline, dá para usar server push http/2
## Animation&lt;/li&gt;
&lt;li&gt;O ideal do animation é que ele seja de 60fps&lt;/li&gt;
&lt;li&gt;os monitores hoje redesenham a tela mais ou menos 60 vezes por segundo. Isso dá a sensação de que um vídeo é um video e não um monte de foto parada tentando se mover.&lt;/li&gt;
&lt;li&gt;Pelo menos no Chrome e Safari, animações do CSS e etc, é feito na GPU. Isso quer dizer que o browser consegue encaixar os elementos certos na GPU, para que a placa gráfica consiga fazer seu trabalho direito&lt;/li&gt;
&lt;li&gt;Quando você muda alguma coisa de CSS via JavaScript, o browser precisa recalcular a posição e os outros elementos que podem estar relacionados com esse elemento modificado&lt;/li&gt;
&lt;li&gt;use a propriedade will-change para avisar o browser de que ele vai precisar animar algum elemento na GPU
## Responsive&lt;/li&gt;
&lt;li&gt;Todas as ações do usuário precisa ser executado a 100ms.&lt;/li&gt;
&lt;li&gt;O usuário precisa saber que sua interação foi executada. na verdade, o usuário só ter uma resposta de que sua ação foi entendida pelo sistema.&lt;/li&gt;
&lt;li&gt;Mostra um loading maneiro, mostra qualquer feedback que faça o usuário entender que sua ação foi executada
## Idle&lt;/li&gt;
&lt;li&gt;Você executa coisas na página, mas tem alguma hora que a animação já acabou de executar, sua página já foi carregada e o usuário não está executando nenhuma ação. Logo, você pod usar esse momento de ócio para disparar alguma coisa não essencial para as ações do usuário.&lt;/li&gt;
&lt;li&gt;O browser é single thread, tudo rola numa thread só. tanto as ações do usuário, quanto seus scripts.&lt;/li&gt;
&lt;li&gt;Quebre as tarefas em tardinhas: setTimeout, setImmediate, requestAnimationFrame, requestIdleCallback&lt;/li&gt;
&lt;li&gt;Use WebWorkers para coisas pesadas em background&lt;/li&gt;
&lt;li&gt;Performance é UX. O modelo de performance é focada nas ações e na experiência do usuário.&lt;/li&gt;
&lt;li&gt;Response em 100ms&lt;/li&gt;
&lt;li&gt;Animation em 16ms&lt;/li&gt;
&lt;li&gt;Idle em 50 ms&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;- Load em 1s&lt;/h2&gt;
</content>
  </entry>
  <entry>
    <title>Otimização Prematura - a raíz de Todo o Mal</title>
    <link rel="alternate" href="http://blog.url.com/otimizacao-prematura-a-raiz-de-todo-o-mal.html"/>
    <id>http://blog.url.com/otimizacao-prematura-a-raiz-de-todo-o-mal.html</id>
    <published>2016-06-21T21:00:00-03:00</published>
    <updated>2016-06-24T02:17:55-03:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Minhas anotações da palestra do Fabio Akita no fechamento do 18 Encontro Locaweb em São Paulo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;por que criar um site SPA?&lt;/li&gt;
&lt;li&gt;Quer fazer um Spotify, Google drive, um Dashboard, você faz um SPA&lt;/li&gt;
&lt;li&gt;Se vai fazer um site de conteúdo, e-commerce ou qualquer coisa que dependa de conteúdo, não faça SPA.&lt;/li&gt;
&lt;li&gt;Esse é o problema da otimização prematura. O que você quer otimizar com SPA? Mostrar texto?&lt;/li&gt;
&lt;li&gt;A maioria dessas tecnologias, arquiteturas e etc, otimiza muito bem alguns tipos de ambientes e isso não significa que o seu ambiente (contexto) pode ser otimizado&lt;/li&gt;
&lt;li&gt;Tem casos e casos para usar Microserviços. Se você está sozinho ou se o grupo de devs é pequeno, não tem por que fazer um microserviço,&lt;/li&gt;
&lt;li&gt;Entenda o seu contexto. Existem empresas que gastam mais de USD$100.000,00 em infra. Mas elas faturam quase 1 Bilhão.&lt;/li&gt;
&lt;li&gt;Custo mínimo de TI:

&lt;ul&gt;
&lt;li&gt;USD 1000 - Cloud&lt;/li&gt;
&lt;li&gt;USD 3000 - 1 Developer&lt;/li&gt;
&lt;li&gt;USD 4000 - 1 Responsável (manager, marketing, etc)&lt;/li&gt;
&lt;li&gt;Você tem que estar preparado para gastar por volta de USD96.000. Este é o mínimo.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Você precisa ganhar algo em torno de 2 milhões de dólares no ano para o custo de TI precisa ficar por volta de 5%.&lt;/li&gt;
&lt;li&gt;Não tente diminuir custo, tente aumentar a receita.&lt;/li&gt;
&lt;li&gt;Tente conseguir mais pessoas comprando seu produto, aumentando sua receita. &lt;/li&gt;
&lt;li&gt;Isso acontece quando você tira os bugs do sistema e o usuário consegue finalizar a compra. É quando sue site fica no ar em dias de pico e as pessoas conseguem finalizar as compras. É aí que você ganha dinheiro&lt;/li&gt;
&lt;li&gt;Não se atenha a um stack. Se você usa .NET, não precisa ser tudo Microsoft. Best of Breed&lt;/li&gt;
&lt;li&gt;Escolha as melhores tecnologias que te trazem os maiores retornos.&lt;/li&gt;
&lt;li&gt;Não faz sentido uma empresa ter máquinas, racks e servidores na própria empresa. &lt;/li&gt;
&lt;li&gt;A menos que você senha uma empresa de comunicação e que seu core business seja mensageria, NodeJS é uma tecnologia a se considerar.&lt;/li&gt;
&lt;li&gt;Pusher, PubNub&lt;/li&gt;
&lt;li&gt;O Pusher custa USD$ 49 para 500 conexões simultâneas. Você não vai conseguir melhor que isso. Só de cloud você vai gastar USD$30.&lt;/li&gt;
&lt;li&gt;Todo mundo fala de SEO, e ainda continua falando hoje. É a mesma coisa o tempo todo, é tudo astrologia.&lt;/li&gt;
&lt;li&gt;Acredite sempre no básico:

&lt;ul&gt;
&lt;li&gt;Você tem URLs amigáveis&lt;/li&gt;
&lt;li&gt;usa sitemap.xml?&lt;/li&gt;
&lt;li&gt;Redireciona HTTP301 &lt;/li&gt;
&lt;li&gt;Usa botões de redes sociais?&lt;/li&gt;
&lt;li&gt;Tem conteúdo original relevante? Se seu conteúdo é irrelevante, não adianta…&lt;/li&gt;
&lt;li&gt;Não copie conteúdo dos outros.&lt;/li&gt;
&lt;li&gt;Pronto, voce não precisa saber mais nada de SEO&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://12factor.net/"&gt;The Twelve-Factor App&lt;/a&gt;
&lt;strong&gt;I. Codebase&lt;/strong&gt;
One codebase tracked in revision control, many deploys
&lt;strong&gt;II. Dependencies&lt;/strong&gt;
Explicitly declare and isolate dependencies
&lt;strong&gt;III. Config&lt;/strong&gt;
Store config in the environment
&lt;strong&gt;IV. Backing services&lt;/strong&gt;
Treat backing services as attached resources
&lt;strong&gt;V. Build, release, run&lt;/strong&gt;
Strictly separate build and run stages
&lt;strong&gt;VI. Processes&lt;/strong&gt;
Execute the app as one or more stateless processes
&lt;strong&gt;VII. Port binding&lt;/strong&gt;
Export services via port binding
&lt;strong&gt;VIII. Concurrency&lt;/strong&gt;
Scale out via the process model
&lt;strong&gt;IX. Disposability&lt;/strong&gt;
Maximize robustness with fast startup and graceful shutdown
&lt;strong&gt;X. Dev/prod parity&lt;/strong&gt;
Keep development, staging, and production as similar as possible
&lt;strong&gt;XI. Logs&lt;/strong&gt;
Treat logs as event streams
&lt;strong&gt;XII. Admin processes&lt;/strong&gt;
Run admin/management tasks as one-off processes&lt;/li&gt;
&lt;li&gt;Quando falamos em código, não precisamos estar preocupados em ganhar tempo. O que é ruim e não faça:

&lt;ul&gt;
&lt;li&gt;Seu sistema não tem pelo menos 70% de cobertura de testes&lt;/li&gt;
&lt;li&gt;Não tem analise estática de código. É um programa lendo seu programa para dar uma nota. (Sugestão: CodeClimate)&lt;/li&gt;
&lt;li&gt;Nenhum código fonte pode ter centenas de linhas por arquivo&lt;/li&gt;
&lt;li&gt;Não deve ter Copy Paste em todo o lugar do código. &lt;/li&gt;
&lt;li&gt;Não pode haver funções com o tamanho de mais de um page down&lt;/li&gt;
&lt;li&gt;Banco de dados com vários campos inúteis&lt;/li&gt;
&lt;li&gt;Se você faz um clone no projeto, você precisa rodar na máquina em minutos, não horas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Spree: 68k de linhas de código. 40k dessas linhas são testes.&lt;/li&gt;
&lt;li&gt;Magento: 300k de linhas 127k são testes. Poucos testes, 10 vezes mais problemas.&lt;/li&gt;
&lt;li&gt;Sua preocupação não pode ser só com performance, é preocupação com manutenabilidade.&lt;/li&gt;
&lt;li&gt;Programadores são ruins para priorizar coisas. &lt;/li&gt;
&lt;li&gt;Instale New Relic. Não importa sua linguagem. Ele vai coletar seus dados de produção e vai te dar um monte de números para você conhecer seu produto. #ficadica&lt;/li&gt;
&lt;li&gt;Teoria das Correntes: como você determina a força de uma corrente, pelo elo mais fraco. Como você resolve? você troca o elo mais fraco. Quando você fizer, um outro elo será mais fraco.&lt;/li&gt;
&lt;li&gt;Sem métricas, sem otimização. Voce tem número?  Se não, você está chutando.&lt;/li&gt;
&lt;li&gt;Primeiro você faça funcionar, depois você corrige, depois você pensa em tornar rápido e finalmente, você pensa me tornar barato - Alan Kay&lt;/li&gt;
&lt;li&gt;Essa é a ordem, você não pode mudá-la!&lt;/li&gt;
&lt;li&gt;O facebook precisa do React? O Google precisa do Angular? Eles não precisam dessas tecnologias para sobreviver. &lt;/li&gt;
&lt;li&gt;Você precisa usar tecnologias de empresas que realmente precisam das suas próprias tecnologias, que realmente ganham dinheiro com elas.&lt;/li&gt;
&lt;li&gt;Não se preocupe em reduzir custos, se preocupe em fazer funcionar, para você ganhar dinheiro e sobreviver.&lt;/li&gt;
&lt;li&gt;Best of Breed Open Source&lt;/li&gt;
&lt;li&gt;Na dúvida, não faz do zero. Use SAAS.&lt;/li&gt;
&lt;li&gt;SEO = Astrologia&lt;/li&gt;
&lt;li&gt;Manutenção &amp;gt; Performance&lt;/li&gt;
&lt;li&gt;Prioridades. Não otimize sem métricas.&lt;/li&gt;
&lt;li&gt;O maior problema dos programadores é a Otimização Prematura.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>O básico sobre Expressões Regulares</title>
    <link rel="alternate" href="http://blog.url.com/o-basico-sobre-expressoes-regulares.html"/>
    <id>http://blog.url.com/o-basico-sobre-expressoes-regulares.html</id>
    <published>2016-06-15T21:00:00-03:00</published>
    <updated>2016-06-20T21:25:20-03:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Expressão Regular é uma das ferramentas mais úteis que você pode ter. Vira e mexe as Expressões Regulares (RegExp) resolvem desde problemas de Find &amp;amp; Replace no editor até validação de dados em diversos níveis do seu projeto. Mas geralmente a gente só lê sobre Expressões Regulares quando precisamos decifrar aquela linha maluca e ainda assim de um jeito meio descuidado, tateando e tentando fazer dar certo uma combinação de caracteres sem sentido.&lt;/p&gt;

&lt;h2&gt;Entendendo as Expressões&lt;/h2&gt;

&lt;p&gt;Uma Expressão Regular é uma representação para que você encontre padrões em um texto. Esse texto pode ser qualquer coisa, desde o valor de um campo de formulário ou simplesmente um search no seu editor de código predileto… Não importa… O objetivo é filtrar padrões em um punhado de informação textual.&lt;/p&gt;

&lt;p&gt;Se você entender que uma Expressão Regular é apenas uma representação formada por símbolos, você não vai ter dificuldades. Cada símbolo representa um tipo de informação. Por exemplo: o &lt;code&gt;.&lt;/code&gt; (ponto) é um curinga. Ele significa que você pode selecionar qualquer caractere, ou seja, qualquer letra, caractere especial ou número. Exceto a quebra de linha, que é representado pelo símbolo &lt;code&gt;\n&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Classe de caracteres&lt;/h3&gt;

&lt;p&gt;Vamos começar pelo mais fácil: quando você faz uma busca, você pode buscar uma combinação de caracteres específica, por exemplo: no seu editor de código, se você fizer uma busca por &lt;strong&gt;a&lt;/strong&gt;, ele vai te mostrar todas as letras &lt;strong&gt;a&lt;/strong&gt; do documento. Mas e se você quiser procurar todas as letras &lt;strong&gt;a&lt;/strong&gt; e as letras &lt;strong&gt;e&lt;/strong&gt;? Simples, você faz um agrupamento utilizando os colchetes &lt;code&gt;[]&lt;/code&gt;. Essa expressão irá encontrar todos os caracteres que estiverem dentro dos colchetes. &lt;a href="http://rubular.com/r/i7apRSchRh"&gt;Veja esse exemplo, onde ele filtra as letras &lt;code&gt;[ue]&lt;/code&gt;&lt;/a&gt;. Isso se chama &lt;strong&gt;classe de caracteres&lt;/strong&gt;, onde você encontra vários caracteres diferentes ao mesmo tempo.&lt;/p&gt;

&lt;p&gt;Bom, se você quiser selecionar TODAS as letras do texto, você não precisa escrever o alfabeto inteiro dentro dos colchetes, basta só usar a representação &lt;code&gt;[A-z]&lt;/code&gt;. Isso quer dizer que ele pega as letras de A até Z, maiúsculas ou minúsculas.&lt;/p&gt;

&lt;p&gt;Se você quiser pegar os números, por exemplo, use &lt;code&gt;[0-9]&lt;/code&gt;. Se quiser todas as letras e todos números: &lt;code&gt;[A-z0-9]&lt;/code&gt;. Pra facilitar a expressão, você pode usar &lt;code&gt;\w&lt;/code&gt;, que vai dar no mesmo.&lt;/p&gt;

&lt;p&gt;Para você fazer uma negação da Classe criada, basta adicionar um &lt;code&gt;^&lt;/code&gt; dentro da classe. Por exemplo, você quer pegar todas as combinações que não sejam formadas pela sequência &lt;code&gt;es&lt;/code&gt;: &lt;code&gt;[^es]&lt;/code&gt;. &lt;a href="http://rubular.com/r/v5TNAzCQKa"&gt;Veja esse exemplo aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Exemplos de classes de caracteres:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A expressão &lt;code&gt;[a-z]&lt;/code&gt; reconhece todas as letras minúsculas.&lt;/li&gt;
&lt;li&gt;  A expressão &lt;code&gt;[A-Z]&lt;/code&gt; reconhece todas as letras maiúsculas.&lt;/li&gt;
&lt;li&gt;  A expressão &lt;code&gt;[A-z]&lt;/code&gt; reconhece todas as letras maiúsculas e minúsculas.&lt;/li&gt;
&lt;li&gt;  A expressão &lt;code&gt;[A-Z0-9]&lt;/code&gt; reconhece todas as letras maiúsculas e números.&lt;/li&gt;
&lt;li&gt;  A expressão &lt;code&gt;[a-e]&lt;/code&gt; reconhece as letras &lt;strong&gt;a&lt;/strong&gt;, &lt;strong&gt;b&lt;/strong&gt;, &lt;strong&gt;c&lt;/strong&gt;, &lt;strong&gt;d&lt;/strong&gt; e &lt;strong&gt;e&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Atalhos para as classes mais comuns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A classe &lt;code&gt;\w&lt;/code&gt; recupera todos os caracteres alpha numericos, ou seja, letras e números, mas não acentos ou caracteres especiais. É o equivalente a &lt;code&gt;[a-zA-Z_0-9]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;  A classe &lt;code&gt;\W&lt;/code&gt; pega TODOS os caracteres que não seja alpha numericos, ou seja, pontuações e espaços.&lt;/li&gt;
&lt;li&gt;  A classe &lt;code&gt;\s&lt;/code&gt; é o equivalente &lt;code&gt;[ \t\n\x0B\f\r]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;  A classe &lt;code&gt;\d&lt;/code&gt; é o equivalente &lt;code&gt;[0-9]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E as classses de negação. Lembrando que basta colocar o sinal de &lt;code&gt;^&lt;/code&gt; logo depois do colchete inicial &lt;code&gt;[&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A expressão de classe &lt;code&gt;[^y]&lt;/code&gt; reconhece qualquer caractere, exceto y.&lt;/li&gt;
&lt;li&gt;  A expressão de classe &lt;code&gt;[^a-e]&lt;/code&gt; reconhece qualquer caractere, exceto &lt;strong&gt;a&lt;/strong&gt;, &lt;strong&gt;b&lt;/strong&gt;, &lt;strong&gt;c&lt;/strong&gt;, &lt;strong&gt;d&lt;/strong&gt; e &lt;strong&gt;e&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  A expressão de classe &lt;code&gt;[^\d]&lt;/code&gt; reconhece qualquer caractere, exceto 0, 1, 2, 3, 4, 5, 6, 7, 8 e 9.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Múltiplos padrões&lt;/h3&gt;

&lt;p&gt;Imagine agora que você queira encontrar dois padrões diferentes de caracteres, por exemplo, duas palavras. Bastando usar o símbolo &lt;code&gt;|&lt;/code&gt; (pipe), que vai significar &lt;strong&gt;OU&lt;/strong&gt;. Nesse caso a expressão irá reconhecer um ou o outro padrão. &lt;a href="http://rubular.com/r/QScUEY0F1D"&gt;Veja esse exemplo&lt;/a&gt; onde recuperamos o retorno das palavras &lt;strong&gt;dolor&lt;/strong&gt; ou &lt;strong&gt;labore&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Âncoras&lt;/h3&gt;

&lt;p&gt;As âncoras recuperam a posição &lt;strong&gt;entre os caracteres, mas não os caracteres em si&lt;/strong&gt;. Por exemplo, a expressão &lt;code&gt;^dolor&lt;/code&gt;, vai recuperar as palavras &lt;strong&gt;dolor&lt;/strong&gt; que estiverem no início da linha (&lt;a href="http://rubular.com/r/xLTGYJY1fz"&gt;veja o exemplo&lt;/a&gt;). A expressão &lt;code&gt;dolor$&lt;/code&gt; vai recuperar o termo que estiver no final da linha (&lt;a href="http://rubular.com/r/FdBuPNAeWE"&gt;veja o exemplo&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;Modos&lt;/h3&gt;

&lt;p&gt;Agora, suponha que você queira pegar uma sequência que contenha um termo parecido, mas que possa estar com algumas letras maiúsculas ou minúsculas. Por exemplo os termos &lt;strong&gt;Lorem&lt;/strong&gt;, &lt;strong&gt;lorem&lt;/strong&gt;, &lt;strong&gt;loRem&lt;/strong&gt;, &lt;strong&gt;lOrEm&lt;/strong&gt; etc, bastaria usar a representação &lt;code&gt;(?i)&lt;/code&gt; antes do termo a ser buscada. A expressão ficaria assim &lt;code&gt;(?i)lorem&lt;/code&gt;. &lt;a href="http://rubular.com/r/oEesGNpNcZ"&gt;Veja este exemplo aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Brincando de validar um email&lt;/h3&gt;

&lt;p&gt;Uma tarefa muito corriqueira é a validação de campos de e-mail. Sem entrar nas polêmicas (validar essas coisas sempre é chato), mas é legal para treinar o que você acabou de ler. A expressão para fazer a validação é essa:&lt;/p&gt;
&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;^\w*(\.\w*)?@\w*\.[a-z]+(\.[a-z]+)?$
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Explicando:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A expressão &lt;code&gt;^&lt;/code&gt; indica o começo da string/linha.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;\w*&lt;/code&gt; pega qualquer caracteres alpha numericos, é o equivalente a &lt;code&gt;[a-zA-Z0-9_]&lt;/code&gt;. O asterísco é quantitativo, detectando qualquer quantidade desses caracteres, iniciando no 0 e indo até o infinito.&lt;/li&gt;
&lt;li&gt;  A expressão &lt;code&gt;(\.\w*)?&lt;/code&gt; significa: parenteses inicia um agrupamento. A expressão &lt;code&gt;\.&lt;/code&gt; detecta literamente um ponto &lt;strong&gt;.&lt;/strong&gt;. A expressão &lt;code&gt;\w*&lt;/code&gt; qualquer quantidade de caracteres alpha numéricos.&lt;/li&gt;
&lt;li&gt;  O ponto de interrogação (&lt;code&gt;?&lt;/code&gt;) é quantitativo: determina que o que vier imediatamente antes dele aparecer na expressão 0 ou 1 vez. Nessa expressão ele aparece duas vezes.&lt;/li&gt;
&lt;li&gt;  O arroba seria o arroba do email mesmo…&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;\w*&lt;/code&gt; que aparece depois do arroba já falamos várias vezes logo acima.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;\.[a-z]&lt;/code&gt; pega um ponto seguido de letras minúsculas. vai detectar algo como &lt;strong&gt;.com&lt;/strong&gt;, &lt;strong&gt;.net&lt;/strong&gt;, etc…&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;+&lt;/code&gt; significa que o que estiver imediatamente antes dele precisa aparecer 1 ou mais vezes no termo.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;(\.[a-z]+)&lt;/code&gt;: abrimos novamente um agrupamento com o parenteses. &lt;code&gt;\.&lt;/code&gt; pega o ponto. A classe &lt;code&gt;[a-z]&lt;/code&gt; seleciona qualquer letra minúscula. E o mais aparece novamente, dizendo que tudo aquilo que estiver antes dele deve aparecer pelo menos 1 vez&lt;/li&gt;
&lt;li&gt;  E a expressão &lt;code&gt;$&lt;/code&gt; pra finalizar significa final da string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veja funcionando abaixo:&lt;/p&gt;

&lt;iframe src="//jsfiddle.net/borrcmd4/7/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0" height="500" width="100%"&gt;&lt;/iframe&gt;

&lt;h4&gt;Para você testar e aprender&lt;/h4&gt;

&lt;p&gt;Existem alguns sites pra facilitar a criação e o debug das expressões regulares, veja abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://regex101.com/r/vS7vZ3/224#javascript"&gt;https://regex101.com/r/vS7vZ3/224#javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://rubular.com"&gt;http://rubular.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://aprenda.vidageek.net/aprenda/regex"&gt;http://aprenda.vidageek.net/aprenda/regex&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://turing.com.br/material/regex/introducao.html#"&gt;http://turing.com.br/material/regex/introducao.html#&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://msdn.microsoft.com/pt-br/library/az24scfc(v=vs.110).aspx"&gt;https://msdn.microsoft.com/pt-br/library/az24scfc(v=vs.110).aspx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
